{
  "timestamp": "2022-03-20T14:16:55",
  "compiler": {
    "name": "@stencil/core",
    "version": "1.9.2",
    "typescriptVersion": "3.8.3"
  },
  "tags": [
    {
      "filePath": "src/components/button/button.tsx",
      "encapsulation": "shadow",
      "tag": "fw-button",
      "name": "fw-button",
      "readme": "# Button (fw-button)\nfw-button displays a button on the user interface and enables performing specific actions based on the button type. The button’s label can be a text, icon, or both.\n\n## Usage\n\n```html live\n<section>\n<fw-label value=\"Try themes\"></fw-label>\n<fw-button color=\"secondary\"> OK </fw-button>\n<fw-button color=\"danger\"> Don't Click </fw-button>\n<fw-button color=\"link\"> Link Button </fw-button>\n<fw-button color=\"text\"> Plain Text Button </fw-button>\n</section>\n<br>\n<section>\n<fw-label value=\"Try sizes\"></fw-label>\n<fw-button size=\"small\"> Small </fw-button>\n<fw-button size=\"mini\" color=\"secondary\"> Mini </fw-button>\n</section>\n<br>\n<section>\n<fw-label value=\"Try icon buttons\"></fw-label>\n<fw-button size=\"icon\"><fw-icon name=\"agent\" color=\"white\"></fw-icon> </fw-button>\n<fw-button size=\"icon\" color=\"secondary\"><fw-icon name=\"phone\"></fw-icon> </fw-button>\n</section>\n<br>\n<section>\n<fw-label value=\"Try icon + text buttons\"></fw-label>\n<fw-button color=\"secondary\"><fw-icon name=\"delete\"></fw-icon> Delete</fw-button>\n<fw-button color=\"primary\"> Copy <fw-icon name=\"code\" color=\"white\"></fw-icon></fw-button>\n</section>\n<br>\n<section>\n<fw-label value=\"Try expand attribute\"></fw-label>\n<fw-button size=\"small\" color=\"secondary\" expand>Span full-width</fw-button>\n</section>\n```\n\n\n",
      "description": "fw-button displays a button on the user interface and enables performing specific actions based on the button type. The button’s label can be a text, icon, or both.",
      "docsTags": [],
      "usage": {},
      "properties": [
        {
          "name": "color",
          "type": "\"danger\" | \"link\" | \"primary\" | \"secondary\" | \"text\"",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "Identifier of  the theme based on which the button is styled.",
          "docsTags": [],
          "default": "'primary'",
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "link",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "text",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Identifier of  the theme based on which the button is styled."
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "Disables the button on the interface. If the attribute’s value is undefined, the value is set to false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Disables the button on the interface. If the attribute’s value is undefined, the value is set to false."
        },
        {
          "name": "expand",
          "type": "boolean",
          "mutable": false,
          "attr": "expand",
          "reflectToAttr": false,
          "docs": "Sets the button to a full-width block. If the attribute’s value is undefined, the value is set to false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Sets the button to a full-width block. If the attribute’s value is undefined, the value is set to false."
        },
        {
          "name": "modalTriggerId",
          "type": "string",
          "mutable": false,
          "attr": "modal-trigger-id",
          "reflectToAttr": false,
          "docs": "Accepts the id of the fw-modal component to open it on click",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Accepts the id of the fw-modal component to open it on click"
        },
        {
          "name": "size",
          "type": "\"mini\" | \"normal\" | \"small\"",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Size of the button.",
          "docsTags": [],
          "default": "'normal'",
          "values": [
            {
              "value": "mini",
              "type": "string"
            },
            {
              "value": "normal",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Size of the button."
        },
        {
          "name": "type",
          "type": "\"button\" | \"reset\" | \"submit\"",
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "Button type based on which actions are performed when the button is clicked.",
          "docsTags": [],
          "default": "'button'",
          "values": [
            {
              "value": "button",
              "type": "string"
            },
            {
              "value": "reset",
              "type": "string"
            },
            {
              "value": "submit",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Button type based on which actions are performed when the button is clicked."
        }
      ],
      "attributes": [
        {
          "name": "color",
          "type": "\"danger\" | \"link\" | \"primary\" | \"secondary\" | \"text\"",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "Identifier of  the theme based on which the button is styled.",
          "docsTags": [],
          "default": "'primary'",
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "link",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "text",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "'primary'",
          "description": "Identifier of  the theme based on which the button is styled."
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "Disables the button on the interface. If the attribute’s value is undefined, the value is set to false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "Disables the button on the interface. If the attribute’s value is undefined, the value is set to false."
        },
        {
          "name": "expand",
          "type": "boolean",
          "mutable": false,
          "attr": "expand",
          "reflectToAttr": false,
          "docs": "Sets the button to a full-width block. If the attribute’s value is undefined, the value is set to false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "Sets the button to a full-width block. If the attribute’s value is undefined, the value is set to false."
        },
        {
          "name": "modal-trigger-id",
          "type": "string",
          "mutable": false,
          "attr": "modal-trigger-id",
          "reflectToAttr": false,
          "docs": "Accepts the id of the fw-modal component to open it on click",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "''",
          "description": "Accepts the id of the fw-modal component to open it on click"
        },
        {
          "name": "size",
          "type": "\"mini\" | \"normal\" | \"small\"",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Size of the button.",
          "docsTags": [],
          "default": "'normal'",
          "values": [
            {
              "value": "mini",
              "type": "string"
            },
            {
              "value": "normal",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "'normal'",
          "description": "Size of the button."
        },
        {
          "name": "type",
          "type": "\"button\" | \"reset\" | \"submit\"",
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "Button type based on which actions are performed when the button is clicked.",
          "docsTags": [],
          "default": "'button'",
          "values": [
            {
              "value": "button",
              "type": "string"
            },
            {
              "value": "reset",
              "type": "string"
            },
            {
              "value": "submit",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "'button'",
          "description": "Button type based on which actions are performed when the button is clicked."
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "fwBlur",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the button loses focus.",
          "docsTags": [],
          "name": "fwBlur",
          "description": "Triggered when the button loses focus.",
          "type": "void"
        },
        {
          "event": "fwClick",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the button is clicked.",
          "docsTags": [],
          "name": "fwClick",
          "description": "Triggered when the button is clicked.",
          "type": "void"
        },
        {
          "event": "fwFocus",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the button comes into focus.",
          "docsTags": [],
          "name": "fwFocus",
          "description": "Triggered when the button comes into focus.",
          "type": "void"
        }
      ],
      "cssProperties": [],
      "slots": [],
      "dependents": [
        "fw-datepicker",
        "fw-dropdown-button",
        "fw-modal"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "fw-datepicker": [
          "fw-button"
        ],
        "fw-dropdown-button": [
          "fw-button"
        ],
        "fw-modal": [
          "fw-button"
        ]
      }
    },
    {
      "filePath": "src/components/checkbox/checkbox.tsx",
      "encapsulation": "shadow",
      "tag": "fw-checkbox",
      "name": "fw-checkbox",
      "readme": "# Checkbox (fw-checkbox)\nfw-checkbox displays a check box on the user interface and enables assigning a state (selected or deselected) to it. In the selected state, the check box displayed on the UI is highlighted and contains a check mark. \n## Usage\n\n```html live\n<fw-checkbox checked label=\"Select to agree\">Agree or Disagree</fw-checkbox><br><br>\n<fw-checkbox checked disabled value=\"dcb\">Disable check box</fw-checkbox>\n\n```\n",
      "description": "fw-checkbox displays a check box on the user interface and enables assigning a state (selected or deselected) to it. In the selected state, the check box displayed on the UI is highlighted and contains a check mark.",
      "docsTags": [],
      "usage": {},
      "properties": [
        {
          "name": "checked",
          "type": "boolean",
          "mutable": true,
          "attr": "checked",
          "reflectToAttr": true,
          "docs": "Sets the state of the check box to selected. If the attribute’s value is undefined, the value is set to false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Sets the state of the check box to selected. If the attribute’s value is undefined, the value is set to false."
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": true,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "Disables the check box on the interface. If the attribute’s value is undefined, the value is set to false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Disables the check box on the interface. If the attribute’s value is undefined, the value is set to false."
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Label displayed on the interface, for the check box.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Label displayed on the interface, for the check box."
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Name of the component, saved as part of form data.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Name of the component, saved as part of form data."
        },
        {
          "name": "value",
          "type": "string",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Identifier corresponding to the component, that is saved when the form data is saved.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Identifier corresponding to the component, that is saved when the form data is saved."
        }
      ],
      "attributes": [
        {
          "name": "checked",
          "type": "boolean",
          "mutable": true,
          "attr": "checked",
          "reflectToAttr": true,
          "docs": "Sets the state of the check box to selected. If the attribute’s value is undefined, the value is set to false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "Sets the state of the check box to selected. If the attribute’s value is undefined, the value is set to false."
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": true,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "Disables the check box on the interface. If the attribute’s value is undefined, the value is set to false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "Disables the check box on the interface. If the attribute’s value is undefined, the value is set to false."
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Label displayed on the interface, for the check box.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "''",
          "description": "Label displayed on the interface, for the check box."
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Name of the component, saved as part of form data.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "''",
          "description": "Name of the component, saved as part of form data."
        },
        {
          "name": "value",
          "type": "string",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Identifier corresponding to the component, that is saved when the form data is saved.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "''",
          "description": "Identifier corresponding to the component, that is saved when the form data is saved."
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "fwBlur",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the check box loses focus.",
          "docsTags": [],
          "name": "fwBlur",
          "description": "Triggered when the check box loses focus.",
          "type": "void"
        },
        {
          "event": "fwChange",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the check box’s value is modified.",
          "docsTags": [],
          "name": "fwChange",
          "description": "Triggered when the check box’s value is modified.",
          "type": "any"
        },
        {
          "event": "fwFocus",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the check box comes into focus.",
          "docsTags": [],
          "name": "fwFocus",
          "description": "Triggered when the check box comes into focus.",
          "type": "void"
        }
      ],
      "cssProperties": [],
      "slots": [],
      "dependents": [
        "fw-dropdown-button"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "fw-dropdown-button": [
          "fw-checkbox"
        ]
      }
    },
    {
      "filePath": "src/components/datepicker/datepicker.tsx",
      "encapsulation": "shadow",
      "tag": "fw-datepicker",
      "name": "fw-datepicker",
      "readme": "# Datepicker (fw-datepicker)\nfw-datepicker displays an input box with a calendar that enables selecting a date or date range. The values preselected in the input box and calendar are based on the fw-datepicker attribute values.\n\n\n## Usage\n\n``` html live\n<fw-label value=\"Single date picker\" color=\"yellow\"></fw-label><br/>\n<fw-datepicker value=\"22-05-2020\" date-format=\"DD-MM-YYYY\"></fw-datepicker>\n<fw-label value=\"A date range picker\" color=\"yellow\"></fw-label><br/>\n<fw-datepicker mode=\"range\" min-date=\"10-05-2020\" max-date=\"10-07-2020\" from-date=\"12-05-2020\" to-date=\"14-05-2020\"></fw-datepicker>\n```\n\n",
      "description": "fw-datepicker displays an input box with a calendar that enables selecting a date or date range. The values preselected in the input box and calendar are based on the fw-datepicker attribute values.",
      "docsTags": [],
      "usage": {},
      "properties": [
        {
          "name": "dateFormat",
          "type": "string",
          "mutable": false,
          "attr": "date-format",
          "reflectToAttr": false,
          "docs": "Format in which the date values selected in the calendar are populated in the input box and saved when the form data is saved.",
          "docsTags": [],
          "default": "'DD-MM-YYYY'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Format in which the date values selected in the calendar are populated in the input box and saved when the form data is saved."
        },
        {
          "name": "fromDate",
          "type": "string",
          "mutable": true,
          "attr": "from-date",
          "reflectToAttr": false,
          "docs": "Starting date of the date range that is preselected in the calendar, if mode is range. Must be a date later than the min-date value.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Starting date of the date range that is preselected in the calendar, if mode is range. Must be a date later than the min-date value."
        },
        {
          "name": "maxDate",
          "type": "string",
          "mutable": false,
          "attr": "max-date",
          "reflectToAttr": false,
          "docs": "Latest date a user can select in the calendar, if mode is range.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Latest date a user can select in the calendar, if mode is range."
        },
        {
          "name": "minDate",
          "type": "string",
          "mutable": false,
          "attr": "min-date",
          "reflectToAttr": false,
          "docs": "Earliest date a user can select in the calendar, if mode is range.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Earliest date a user can select in the calendar, if mode is range."
        },
        {
          "name": "mode",
          "type": "\"range\" | \"single date\"",
          "mutable": false,
          "attr": "mode",
          "reflectToAttr": false,
          "docs": "Type of date selection enabled for the calendar. If the value is range, a user can select a date range in the calendar.",
          "docsTags": [],
          "default": "'single date'",
          "values": [
            {
              "value": "range",
              "type": "string"
            },
            {
              "value": "single date",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Type of date selection enabled for the calendar. If the value is range, a user can select a date range in the calendar."
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Name of the component, saved as part of form data.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Name of the component, saved as part of form data."
        },
        {
          "name": "placeholder",
          "type": "string",
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "Text displayed in the input box before a user selects a date or date range.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Text displayed in the input box before a user selects a date or date range."
        },
        {
          "name": "toDate",
          "type": "string",
          "mutable": true,
          "attr": "to-date",
          "reflectToAttr": false,
          "docs": "Ending date of the date range that is preselected in the calendar, if mode is range. Must be a date earlier than the max-date value.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Ending date of the date range that is preselected in the calendar, if mode is range. Must be a date earlier than the max-date value."
        },
        {
          "name": "value",
          "type": "string",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Date that is preselected in the calendar, if mode is single date or undefined.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Date that is preselected in the calendar, if mode is single date or undefined."
        }
      ],
      "attributes": [
        {
          "name": "date-format",
          "type": "string",
          "mutable": false,
          "attr": "date-format",
          "reflectToAttr": false,
          "docs": "Format in which the date values selected in the calendar are populated in the input box and saved when the form data is saved.",
          "docsTags": [],
          "default": "'DD-MM-YYYY'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "'DD-MM-YYYY'",
          "description": "Format in which the date values selected in the calendar are populated in the input box and saved when the form data is saved."
        },
        {
          "name": "from-date",
          "type": "string",
          "mutable": true,
          "attr": "from-date",
          "reflectToAttr": false,
          "docs": "Starting date of the date range that is preselected in the calendar, if mode is range. Must be a date later than the min-date value.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Starting date of the date range that is preselected in the calendar, if mode is range. Must be a date later than the min-date value."
        },
        {
          "name": "max-date",
          "type": "string",
          "mutable": false,
          "attr": "max-date",
          "reflectToAttr": false,
          "docs": "Latest date a user can select in the calendar, if mode is range.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Latest date a user can select in the calendar, if mode is range."
        },
        {
          "name": "min-date",
          "type": "string",
          "mutable": false,
          "attr": "min-date",
          "reflectToAttr": false,
          "docs": "Earliest date a user can select in the calendar, if mode is range.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Earliest date a user can select in the calendar, if mode is range."
        },
        {
          "name": "mode",
          "type": "\"range\" | \"single date\"",
          "mutable": false,
          "attr": "mode",
          "reflectToAttr": false,
          "docs": "Type of date selection enabled for the calendar. If the value is range, a user can select a date range in the calendar.",
          "docsTags": [],
          "default": "'single date'",
          "values": [
            {
              "value": "range",
              "type": "string"
            },
            {
              "value": "single date",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "'single date'",
          "description": "Type of date selection enabled for the calendar. If the value is range, a user can select a date range in the calendar."
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Name of the component, saved as part of form data.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "''",
          "description": "Name of the component, saved as part of form data."
        },
        {
          "name": "placeholder",
          "type": "string",
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "Text displayed in the input box before a user selects a date or date range.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Text displayed in the input box before a user selects a date or date range."
        },
        {
          "name": "to-date",
          "type": "string",
          "mutable": true,
          "attr": "to-date",
          "reflectToAttr": false,
          "docs": "Ending date of the date range that is preselected in the calendar, if mode is range. Must be a date earlier than the max-date value.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Ending date of the date range that is preselected in the calendar, if mode is range. Must be a date earlier than the max-date value."
        },
        {
          "name": "value",
          "type": "string",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Date that is preselected in the calendar, if mode is single date or undefined.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Date that is preselected in the calendar, if mode is single date or undefined."
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "fwChange",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the update button clicked",
          "docsTags": [],
          "name": "fwChange",
          "description": "Triggered when the update button clicked",
          "type": "any"
        }
      ],
      "cssProperties": [],
      "slots": [],
      "dependents": [],
      "dependencies": [
        "fw-input",
        "fw-select",
        "fw-select-option",
        "fw-button"
      ],
      "dependencyGraph": {
        "fw-datepicker": [
          "fw-input",
          "fw-select",
          "fw-select-option",
          "fw-button"
        ],
        "fw-input": [
          "fw-icon"
        ],
        "fw-select": [
          "fw-tag",
          "fw-select-option"
        ]
      }
    },
    {
      "filePath": "src/components/dropdown-button/dropdown-button.tsx",
      "encapsulation": "shadow",
      "tag": "fw-dropdown-button",
      "name": "fw-dropdown-button",
      "readme": "# Dropdown button (fw-dropdown-button)\nfw-dropdown-button displays a dropdown button on the user interface and enables dropdding down options. It can also be searchable. For each option select, an event is triggered\n\n## Usage\n```html live\n<fw-label color=\"blue\" value=\"Normal dropdown button\"></fw-label>\n<br>\n<fw-dropdown-button label=\"Choose the sport\">\n  <div slot=\"dropdown-options\">\n    <option id=\"1\" value=\"Cricket\">Cricket</option>\n    <option id=\"2\" value=\"Football\">Football</option>\n    <option id=\"3\" value=\"Hockey\">Hockey</option>\n    <option id=\"4\" value=\"Table tennis\">Table tennis</option>\n    <option id=\"5\" value=\"Badminton\">Badminton</option>\n    <option id=\"6\" value=\"Tennis\">Tennis</option>\n  </div>\n</fw-dropdown-button>\n<br><br>\n<fw-label color=\"blue\" value=\"Splittable dropdown button\"></fw-label>\n<br>\n<fw-dropdown-button split color=\"secondary\" label=\"Choose the sport\">\n  <div slot=\"dropdown-options\">\n    <option id=\"1\" value=\"Cricket\">Cricket</option>\n    <option id=\"2\" value=\"Football\">Football</option>\n    <option id=\"3\" value=\"Hockey\">Hockey</option>\n    <option id=\"4\" value=\"Table tennis\">Table tennis</option>\n    <option id=\"5\" value=\"Badminton\">Badminton</option>\n    <option id=\"6\" value=\"Tennis\">Tennis</option>\n  </div>\n</fw-dropdown-button>\n<br><br>\n<fw-label color=\"blue\" value=\"Searchable dropdown button\"></fw-label>\n<br>\n<fw-dropdown-button searchable label=\"Sport\" placeholder=\"Choose a sport\">\n  <div slot=\"dropdown-options\">\n    <option id=\"1\" value=\"Cricket\">Cricket</option>\n    <option id=\"2\" value=\"Football\">Football</option>\n    <option id=\"3\" value=\"Hockey\">Hockey</option>\n    <option id=\"4\" value=\"Table tennis\">Table tennis</option>\n    <option id=\"5\" value=\"Badminton\">Badminton</option>\n    <option id=\"6\" value=\"Tennis\">Tennis</option>\n  </div>\n</fw-dropdown-button>\n```\n",
      "description": "fw-dropdown-button displays a dropdown button on the user interface and enables dropdding down options. It can also be searchable. For each option select, an event is triggered",
      "docsTags": [],
      "usage": {},
      "properties": [
        {
          "name": "color",
          "type": "\"danger\" | \"link\" | \"primary\" | \"secondary\" | \"text\"",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "Dropdown Button color",
          "docsTags": [],
          "default": "'primary'",
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "link",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "text",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Dropdown Button color"
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Disables the dropdown button if its true",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Disables the dropdown button if its true"
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Label for the dropdown button",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Label for the dropdown button"
        },
        {
          "name": "options",
          "type": "any[]",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Options to show in the dropdown button",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "any[]"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Options to show in the dropdown button"
        },
        {
          "name": "placeholder",
          "type": "string",
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "Placeholder text for search input. Validated only if dropdown and searchable is true",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Placeholder text for search input. Validated only if dropdown and searchable is true"
        },
        {
          "name": "searchable",
          "type": "boolean",
          "mutable": false,
          "attr": "searchable",
          "reflectToAttr": false,
          "docs": "Displays a searchable dropdown button",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Displays a searchable dropdown button"
        },
        {
          "name": "split",
          "type": "boolean",
          "mutable": false,
          "attr": "split",
          "reflectToAttr": false,
          "docs": "Displays a split dropdown button",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Displays a split dropdown button"
        },
        {
          "name": "value",
          "type": "any",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Value of the dropdown button",
          "docsTags": [],
          "default": "undefined",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Value of the dropdown button"
        }
      ],
      "attributes": [
        {
          "name": "color",
          "type": "\"danger\" | \"link\" | \"primary\" | \"secondary\" | \"text\"",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "Dropdown Button color",
          "docsTags": [],
          "default": "'primary'",
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "link",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "text",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "'primary'",
          "description": "Dropdown Button color"
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Disables the dropdown button if its true",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "Disables the dropdown button if its true"
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Label for the dropdown button",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Label for the dropdown button"
        },
        {
          "type": "any[]",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Options to show in the dropdown button",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "any[]"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "[]",
          "description": "Options to show in the dropdown button"
        },
        {
          "name": "placeholder",
          "type": "string",
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "Placeholder text for search input. Validated only if dropdown and searchable is true",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "''",
          "description": "Placeholder text for search input. Validated only if dropdown and searchable is true"
        },
        {
          "name": "searchable",
          "type": "boolean",
          "mutable": false,
          "attr": "searchable",
          "reflectToAttr": false,
          "docs": "Displays a searchable dropdown button",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "Displays a searchable dropdown button"
        },
        {
          "name": "split",
          "type": "boolean",
          "mutable": false,
          "attr": "split",
          "reflectToAttr": false,
          "docs": "Displays a split dropdown button",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "Displays a split dropdown button"
        },
        {
          "name": "value",
          "type": "any",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Value of the dropdown button",
          "docsTags": [],
          "default": "undefined",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "undefined",
          "description": "Value of the dropdown button"
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "fwOptionClick",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when an option is clicked",
          "docsTags": [],
          "name": "fwOptionClick",
          "description": "Triggered when an option is clicked",
          "type": "any"
        },
        {
          "event": "fwOptionsAdd",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when Add button for searchable dropdown is clicked",
          "docsTags": [],
          "name": "fwOptionsAdd",
          "description": "Triggered when Add button for searchable dropdown is clicked",
          "type": "any"
        }
      ],
      "cssProperties": [
        {
          "name": "--dropdown-font-size",
          "annotation": "prop",
          "docs": "Dropdown item font size in pixels",
          "description": "Dropdown item font size in pixels"
        },
        {
          "name": "--dropdown-max-height",
          "annotation": "prop",
          "docs": "Dropdown maximum height in pixels",
          "description": "Dropdown maximum height in pixels"
        },
        {
          "name": "--dropdown-max-width",
          "annotation": "prop",
          "docs": "Dropdown maximum width in pixels",
          "description": "Dropdown maximum width in pixels"
        },
        {
          "name": "--dropdown-min-height",
          "annotation": "prop",
          "docs": "Dropdown minimum height in pixels",
          "description": "Dropdown minimum height in pixels"
        },
        {
          "name": "--dropdown-min-width",
          "annotation": "prop",
          "docs": "Dropdown minimum width in pixels",
          "description": "Dropdown minimum width in pixels"
        }
      ],
      "slots": [],
      "dependents": [],
      "dependencies": [
        "fw-icon",
        "fw-input",
        "fw-button",
        "fw-checkbox"
      ],
      "dependencyGraph": {
        "fw-dropdown-button": [
          "fw-icon",
          "fw-input",
          "fw-button",
          "fw-checkbox"
        ],
        "fw-input": [
          "fw-icon"
        ]
      }
    },
    {
      "filePath": "src/components/icon/icon.tsx",
      "encapsulation": "shadow",
      "tag": "fw-icon",
      "name": "fw-icon",
      "readme": "# Icon (fw-icon)\nfw-icon displays an icon-sized image that imparts meaning to the component it is associated with.\n## Usage\n\n```html live\n<fw-icon name=\"add-contact\" size=\"18\" color=\"green\"></fw-icon>\n```\n\n### Icons\n\nThe following are the icons supported:\n\n<IconGallery/>\n",
      "description": "fw-icon displays an icon-sized image that imparts meaning to the component it is associated with.",
      "docsTags": [],
      "usage": {},
      "properties": [
        {
          "name": "color",
          "type": "string",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "Color in which the icon is displayed, specified as a standard CSS color or as a HEX code.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Color in which the icon is displayed, specified as a standard CSS color or as a HEX code."
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Identifier of the icon. The attribute’s value must be a valid svg file in the repo of icons (assets/icons).",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Identifier of the icon. The attribute’s value must be a valid svg file in the repo of icons (assets/icons)."
        },
        {
          "name": "size",
          "type": "number",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Size of the icon, specified in number of  pixels.",
          "docsTags": [],
          "default": "12",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Size of the icon, specified in number of  pixels."
        }
      ],
      "attributes": [
        {
          "name": "color",
          "type": "string",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "Color in which the icon is displayed, specified as a standard CSS color or as a HEX code.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "''",
          "description": "Color in which the icon is displayed, specified as a standard CSS color or as a HEX code."
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Identifier of the icon. The attribute’s value must be a valid svg file in the repo of icons (assets/icons).",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Identifier of the icon. The attribute’s value must be a valid svg file in the repo of icons (assets/icons)."
        },
        {
          "name": "size",
          "type": "number",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Size of the icon, specified in number of  pixels.",
          "docsTags": [],
          "default": "12",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "12",
          "description": "Size of the icon, specified in number of  pixels."
        }
      ],
      "methods": [],
      "events": [],
      "cssProperties": [
        {
          "name": "--icon-color",
          "annotation": "prop",
          "docs": "Color of the icon",
          "description": "Color of the icon"
        }
      ],
      "slots": [],
      "dependents": [
        "fw-dropdown-button",
        "fw-input",
        "fw-modal",
        "fw-toast"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "fw-dropdown-button": [
          "fw-icon"
        ],
        "fw-input": [
          "fw-icon"
        ],
        "fw-modal": [
          "fw-icon"
        ],
        "fw-toast": [
          "fw-icon"
        ]
      }
    },
    {
      "filePath": "src/components/input/input.tsx",
      "encapsulation": "shadow",
      "tag": "fw-input",
      "name": "fw-input",
      "readme": "# Input (fw-input)\nfw-input displays a single-line input box on the user interface and enables assigning a value to it. \n\n## Usage\n\n```html live\n<fw-input\n  label=\"Name\"\n  icon-left=\"add-contact\"\n  state-text=\"Do not enter your user ID\"\n  state=\"warning\"\n  placeholder=\"Enter your official name\"\n  required\n  clear-input>\n</fw-input>\n<fw-input\n  label=\"Password\"\n  state-text=\"Password is incorrect\"\n  state=\"error\"\n  required\n  clear-input>\n</fw-input>\n<fw-input\n  label=\"Verification Code\"\nplaceholder=\"Enter the verification code sent to the registered email address\"\n  state=\"normal\"\n  clear-input>\n</fw-input>\n<fw-input\n  label=\"Deprecated Field\"\n  disabled\n  state=\"normal\"\n  clear-input>\n</fw-input>\n<fw-input\n  label=\"Do Not Modify\"\n  value=\"Not applicable\"\n  readonly\n  state=\"normal\"\n  clear-input>\n</fw-input>\n\n\n```\n",
      "description": "fw-input displays a single-line input box on the user interface and enables assigning a value to it.",
      "docsTags": [],
      "usage": {},
      "properties": [
        {
          "name": "autocomplete",
          "type": "\"off\" | \"on\"",
          "mutable": false,
          "attr": "autocomplete",
          "reflectToAttr": false,
          "docs": "Specifies whether the browser can display suggestions to autocomplete the text value.",
          "docsTags": [],
          "default": "'off'",
          "values": [
            {
              "value": "off",
              "type": "string"
            },
            {
              "value": "on",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Specifies whether the browser can display suggestions to autocomplete the text value."
        },
        {
          "name": "autofocus",
          "type": "boolean",
          "mutable": false,
          "attr": "autofocus",
          "reflectToAttr": false,
          "docs": "Specifies whether the browser can auto focus the input field",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Specifies whether the browser can auto focus the input field"
        },
        {
          "name": "clearInput",
          "type": "boolean",
          "mutable": false,
          "attr": "clear-input",
          "reflectToAttr": false,
          "docs": "Displays a right-justified clear icon in the text box. Clicking the icon clears the input text. If the attribute’s value is undefined, the value is set to false. For a read-only input box, the clear icon is not displayed unless a default value is specified for the input box.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Displays a right-justified clear icon in the text box. Clicking the icon clears the input text. If the attribute’s value is undefined, the value is set to false. For a read-only input box, the clear icon is not displayed unless a default value is specified for the input box."
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Disables the component on the interface. If the attribute’s value is undefined, the value is set to false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Disables the component on the interface. If the attribute’s value is undefined, the value is set to false."
        },
        {
          "name": "iconLeft",
          "type": "string",
          "mutable": false,
          "attr": "icon-left",
          "reflectToAttr": false,
          "docs": "Identifier of the icon that is displayed in the left side of the text box. The attribute’s value must be a valid svg file in the repo of icons (assets/icons).",
          "docsTags": [],
          "default": "undefined",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Identifier of the icon that is displayed in the left side of the text box. The attribute’s value must be a valid svg file in the repo of icons (assets/icons)."
        },
        {
          "name": "iconRight",
          "type": "string",
          "mutable": false,
          "attr": "icon-right",
          "reflectToAttr": false,
          "docs": "Identifier of the icon that is displayed in the right side of the text box. The attribute’s value must be a valid svg file in the repo of icons (assets/icons).",
          "docsTags": [],
          "default": "undefined",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Identifier of the icon that is displayed in the right side of the text box. The attribute’s value must be a valid svg file in the repo of icons (assets/icons)."
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Label displayed on the interface, for the component.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Label displayed on the interface, for the component."
        },
        {
          "name": "maxlength",
          "type": "number",
          "mutable": false,
          "attr": "maxlength",
          "reflectToAttr": false,
          "docs": "Maximum number of characters a user can enter in the text box.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false,
          "description": "Maximum number of characters a user can enter in the text box."
        },
        {
          "name": "minlength",
          "type": "number",
          "mutable": false,
          "attr": "minlength",
          "reflectToAttr": false,
          "docs": "Minimum number of characters a user must enter in the text box for the value to be valid.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false,
          "description": "Minimum number of characters a user must enter in the text box for the value to be valid."
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Name of the component, saved as part of form data.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Name of the component, saved as part of form data."
        },
        {
          "name": "placeholder",
          "type": "string",
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "Text displayed in the text box before a user enters a value.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "Text displayed in the text box before a user enters a value."
        },
        {
          "name": "readonly",
          "type": "boolean",
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "If true, the user cannot enter a value in the input box. If the attribute’s value is undefined, the value is set to false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "If true, the user cannot enter a value in the input box. If the attribute’s value is undefined, the value is set to false."
        },
        {
          "name": "required",
          "type": "boolean",
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "Specifies the input box as a mandatory field and displays an asterisk next to the label. If the attribute’s value is undefined, the value is set to false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Specifies the input box as a mandatory field and displays an asterisk next to the label. If the attribute’s value is undefined, the value is set to false."
        },
        {
          "name": "state",
          "type": "\"error\" | \"normal\" | \"warning\"",
          "mutable": false,
          "attr": "state",
          "reflectToAttr": false,
          "docs": "Theme based on which the text box is styled.",
          "docsTags": [],
          "default": "'normal'",
          "values": [
            {
              "value": "error",
              "type": "string"
            },
            {
              "value": "normal",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Theme based on which the text box is styled."
        },
        {
          "name": "stateText",
          "type": "string",
          "mutable": false,
          "attr": "state-text",
          "reflectToAttr": false,
          "docs": "Descriptive or instructional text displayed below the text box.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Descriptive or instructional text displayed below the text box."
        },
        {
          "name": "type",
          "type": "\"number\" | \"text\"",
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "Type of value accepted as the input value. If a user enters a value other than the specified type, the input box is not populated.",
          "docsTags": [],
          "default": "'text'",
          "values": [
            {
              "value": "number",
              "type": "string"
            },
            {
              "value": "text",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Type of value accepted as the input value. If a user enters a value other than the specified type, the input box is not populated."
        },
        {
          "name": "value",
          "type": "string",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Default value displayed in the input box.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "Default value displayed in the input box."
        }
      ],
      "attributes": [
        {
          "name": "autocomplete",
          "type": "\"off\" | \"on\"",
          "mutable": false,
          "attr": "autocomplete",
          "reflectToAttr": false,
          "docs": "Specifies whether the browser can display suggestions to autocomplete the text value.",
          "docsTags": [],
          "default": "'off'",
          "values": [
            {
              "value": "off",
              "type": "string"
            },
            {
              "value": "on",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "'off'",
          "description": "Specifies whether the browser can display suggestions to autocomplete the text value."
        },
        {
          "name": "autofocus",
          "type": "boolean",
          "mutable": false,
          "attr": "autofocus",
          "reflectToAttr": false,
          "docs": "Specifies whether the browser can auto focus the input field",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "Specifies whether the browser can auto focus the input field"
        },
        {
          "name": "clear-input",
          "type": "boolean",
          "mutable": false,
          "attr": "clear-input",
          "reflectToAttr": false,
          "docs": "Displays a right-justified clear icon in the text box. Clicking the icon clears the input text. If the attribute’s value is undefined, the value is set to false. For a read-only input box, the clear icon is not displayed unless a default value is specified for the input box.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "Displays a right-justified clear icon in the text box. Clicking the icon clears the input text. If the attribute’s value is undefined, the value is set to false. For a read-only input box, the clear icon is not displayed unless a default value is specified for the input box."
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Disables the component on the interface. If the attribute’s value is undefined, the value is set to false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "Disables the component on the interface. If the attribute’s value is undefined, the value is set to false."
        },
        {
          "name": "icon-left",
          "type": "string",
          "mutable": false,
          "attr": "icon-left",
          "reflectToAttr": false,
          "docs": "Identifier of the icon that is displayed in the left side of the text box. The attribute’s value must be a valid svg file in the repo of icons (assets/icons).",
          "docsTags": [],
          "default": "undefined",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "undefined",
          "description": "Identifier of the icon that is displayed in the left side of the text box. The attribute’s value must be a valid svg file in the repo of icons (assets/icons)."
        },
        {
          "name": "icon-right",
          "type": "string",
          "mutable": false,
          "attr": "icon-right",
          "reflectToAttr": false,
          "docs": "Identifier of the icon that is displayed in the right side of the text box. The attribute’s value must be a valid svg file in the repo of icons (assets/icons).",
          "docsTags": [],
          "default": "undefined",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "undefined",
          "description": "Identifier of the icon that is displayed in the right side of the text box. The attribute’s value must be a valid svg file in the repo of icons (assets/icons)."
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Label displayed on the interface, for the component.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "''",
          "description": "Label displayed on the interface, for the component."
        },
        {
          "name": "maxlength",
          "type": "number",
          "mutable": false,
          "attr": "maxlength",
          "reflectToAttr": false,
          "docs": "Maximum number of characters a user can enter in the text box.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false,
          "description": "Maximum number of characters a user can enter in the text box."
        },
        {
          "name": "minlength",
          "type": "number",
          "mutable": false,
          "attr": "minlength",
          "reflectToAttr": false,
          "docs": "Minimum number of characters a user must enter in the text box for the value to be valid.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false,
          "description": "Minimum number of characters a user must enter in the text box for the value to be valid."
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Name of the component, saved as part of form data.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "''",
          "description": "Name of the component, saved as part of form data."
        },
        {
          "name": "placeholder",
          "type": "string",
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "Text displayed in the text box before a user enters a value.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "Text displayed in the text box before a user enters a value."
        },
        {
          "name": "readonly",
          "type": "boolean",
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "If true, the user cannot enter a value in the input box. If the attribute’s value is undefined, the value is set to false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "If true, the user cannot enter a value in the input box. If the attribute’s value is undefined, the value is set to false."
        },
        {
          "name": "required",
          "type": "boolean",
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "Specifies the input box as a mandatory field and displays an asterisk next to the label. If the attribute’s value is undefined, the value is set to false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "Specifies the input box as a mandatory field and displays an asterisk next to the label. If the attribute’s value is undefined, the value is set to false."
        },
        {
          "name": "state",
          "type": "\"error\" | \"normal\" | \"warning\"",
          "mutable": false,
          "attr": "state",
          "reflectToAttr": false,
          "docs": "Theme based on which the text box is styled.",
          "docsTags": [],
          "default": "'normal'",
          "values": [
            {
              "value": "error",
              "type": "string"
            },
            {
              "value": "normal",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "'normal'",
          "description": "Theme based on which the text box is styled."
        },
        {
          "name": "state-text",
          "type": "string",
          "mutable": false,
          "attr": "state-text",
          "reflectToAttr": false,
          "docs": "Descriptive or instructional text displayed below the text box.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "''",
          "description": "Descriptive or instructional text displayed below the text box."
        },
        {
          "name": "type",
          "type": "\"number\" | \"text\"",
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "Type of value accepted as the input value. If a user enters a value other than the specified type, the input box is not populated.",
          "docsTags": [],
          "default": "'text'",
          "values": [
            {
              "value": "number",
              "type": "string"
            },
            {
              "value": "text",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "'text'",
          "description": "Type of value accepted as the input value. If a user enters a value other than the specified type, the input box is not populated."
        },
        {
          "name": "value",
          "type": "string",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Default value displayed in the input box.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "defaultValue": "''",
          "description": "Default value displayed in the input box."
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on a specific `fw-input`. Use this method instead of the global `input.focus()`.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "fwBlur",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the input box loses focus.",
          "docsTags": [],
          "name": "fwBlur",
          "description": "Triggered when the input box loses focus.",
          "type": "void"
        },
        {
          "event": "fwChange",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the value in the input box is modified.",
          "docsTags": [],
          "name": "fwChange",
          "description": "Triggered when the value in the input box is modified.",
          "type": "any"
        },
        {
          "event": "fwFocus",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the input box comes into focus.",
          "docsTags": [],
          "name": "fwFocus",
          "description": "Triggered when the input box comes into focus.",
          "type": "void"
        },
        {
          "event": "fwInput",
          "detail": "KeyboardEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when a value is entered in the input box.",
          "docsTags": [],
          "name": "fwInput",
          "description": "Triggered when a value is entered in the input box.",
          "type": "KeyboardEvent"
        },
        {
          "event": "fwInputClear",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when clear icon is clicked.",
          "docsTags": [],
          "name": "fwInputClear",
          "description": "Triggered when clear icon is clicked.",
          "type": "any"
        }
      ],
      "cssProperties": [],
      "slots": [],
      "dependents": [
        "fw-datepicker",
        "fw-dropdown-button"
      ],
      "dependencies": [
        "fw-icon"
      ],
      "dependencyGraph": {
        "fw-input": [
          "fw-icon"
        ],
        "fw-datepicker": [
          "fw-input"
        ],
        "fw-dropdown-button": [
          "fw-input"
        ]
      }
    },
    {
      "filePath": "src/components/label/label.tsx",
      "encapsulation": "shadow",
      "tag": "fw-label",
      "name": "fw-label",
      "readme": "# Label (fw-label)\nfw-label displays an informational text component that identifies other components on the user interface. \n\n## Usage\n\n```html live\n<fw-label value=\"Meta Information\"></fw-label>\n<fw-label value=\"Response Received\" color=\"blue\"></fw-label>\n<fw-label value=\"Overdue\" color=\"red\"></fw-label>\n<fw-label value=\"New\" color=\"green\"></fw-label>\n<fw-label value=\"Pending\" color=\"yellow\"></fw-label>\n<fw-label value=\"Archived\" color=\"grey\"></fw-label>\n```\n\n\n",
      "description": "fw-label displays an informational text component that identifies other components on the user interface.",
      "docsTags": [],
      "usage": {},
      "properties": [
        {
          "name": "color",
          "type": "\"blue\" | \"green\" | \"grey\" | \"normal\" | \"red\" | \"yellow\"",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "Theme based on which the label is styled.",
          "docsTags": [],
          "default": "'normal'",
          "values": [
            {
              "value": "blue",
              "type": "string"
            },
            {
              "value": "green",
              "type": "string"
            },
            {
              "value": "grey",
              "type": "string"
            },
            {
              "value": "normal",
              "type": "string"
            },
            {
              "value": "red",
              "type": "string"
            },
            {
              "value": "yellow",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Theme based on which the label is styled."
        },
        {
          "name": "value",
          "type": "string",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Display text in the label.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Display text in the label."
        }
      ],
      "attributes": [
        {
          "name": "color",
          "type": "\"blue\" | \"green\" | \"grey\" | \"normal\" | \"red\" | \"yellow\"",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "Theme based on which the label is styled.",
          "docsTags": [],
          "default": "'normal'",
          "values": [
            {
              "value": "blue",
              "type": "string"
            },
            {
              "value": "green",
              "type": "string"
            },
            {
              "value": "grey",
              "type": "string"
            },
            {
              "value": "normal",
              "type": "string"
            },
            {
              "value": "red",
              "type": "string"
            },
            {
              "value": "yellow",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "'normal'",
          "description": "Theme based on which the label is styled."
        },
        {
          "name": "value",
          "type": "string",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Display text in the label.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "''",
          "description": "Display text in the label."
        }
      ],
      "methods": [],
      "events": [],
      "cssProperties": [
        {
          "name": "--label-padding-horizontal",
          "annotation": "prop",
          "docs": "Left - right padding for label",
          "description": "Left - right padding for label"
        },
        {
          "name": "--label-padding-vertical",
          "annotation": "prop",
          "docs": "Top - bottom padding for label",
          "description": "Top - bottom padding for label"
        }
      ],
      "slots": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/modal/modal.tsx",
      "encapsulation": "shadow",
      "tag": "fw-modal",
      "name": "fw-modal",
      "readme": "# Modal (fw-modal)\n\nModals are used as an overlay to display information. It can also be used as confirm boxes to take user inputs.\n\n## Usage\n\n```html live\n  <fw-button modal-trigger-id='welcome'> Open Modal </fw-button>\n  <fw-modal id='welcome' title-text=\"Welcome\">\n    Hello,\n    Welcome to Crayons\n  </fw-modal>\n\n  <fw-button modal-trigger-id='small'> Open Small Modal </fw-button>\n  <fw-modal id='small' title-text=\"Welcome\" size=\"small\">\n    This is a small modal\n  </fw-modal>\n\n  <fw-button modal-trigger-id='large'> Open Large Modal </fw-button>\n  <fw-modal id='large' title-text=\"Welcome\" icon=\"agent\" description=\"Subtitle goes here\" size=\"large\">\n    This is a large modal\n  </fw-modal>\n\n  <fw-button modal-trigger-id='custom'> Open Custom Footer Modal </fw-button>\n  <fw-modal id=\"custom\" title-text=\"Welcome\" icon=\"agent\" description=\"Subtitle goes here\" custom-footer>\n    You can customize the footer via `<i>slots</i>`\n    <span slot=\"footer\">\n      <fw-button color=\"danger\">Confirm</fw-button>\n    </span>\n  </fw-modal>\n```\n\n",
      "description": "Modals are used as an overlay to display information. It can also be used as confirm boxes to take user inputs.",
      "docsTags": [],
      "usage": {},
      "properties": [
        {
          "name": "cancelText",
          "type": "string",
          "mutable": false,
          "attr": "cancel-text",
          "reflectToAttr": false,
          "docs": "The text for the cancel button",
          "docsTags": [],
          "default": "'Cancel'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "The text for the cancel button"
        },
        {
          "name": "customFooter",
          "type": "boolean",
          "mutable": false,
          "attr": "custom-footer",
          "reflectToAttr": false,
          "docs": "Enable custom footer",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Enable custom footer"
        },
        {
          "name": "description",
          "type": "string",
          "mutable": false,
          "attr": "description",
          "reflectToAttr": false,
          "docs": "The title text to be displayed on the modal",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "The title text to be displayed on the modal"
        },
        {
          "name": "hideFooter",
          "type": "boolean",
          "mutable": false,
          "attr": "hide-footer",
          "reflectToAttr": false,
          "docs": "Hides the footer",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Hides the footer"
        },
        {
          "name": "icon",
          "type": "string",
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "The icon to be displayed with the title",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "The icon to be displayed with the title"
        },
        {
          "name": "size",
          "type": "\"large\" | \"small\" | \"standard\"",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Size of the modal",
          "docsTags": [],
          "default": "'standard'",
          "values": [
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            },
            {
              "value": "standard",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Size of the modal"
        },
        {
          "name": "successText",
          "type": "string",
          "mutable": false,
          "attr": "success-text",
          "reflectToAttr": false,
          "docs": "The text for the success button",
          "docsTags": [],
          "default": "'OK'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "The text for the success button"
        },
        {
          "name": "titleText",
          "type": "string",
          "mutable": false,
          "attr": "title-text",
          "reflectToAttr": false,
          "docs": "The title text to be displayed on the modal",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "The title text to be displayed on the modal"
        },
        {
          "name": "visible",
          "type": "boolean",
          "mutable": true,
          "attr": "visible",
          "reflectToAttr": true,
          "docs": "Toggle the visibility of the modal",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Toggle the visibility of the modal"
        }
      ],
      "attributes": [
        {
          "name": "cancel-text",
          "type": "string",
          "mutable": false,
          "attr": "cancel-text",
          "reflectToAttr": false,
          "docs": "The text for the cancel button",
          "docsTags": [],
          "default": "'Cancel'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "'Cancel'",
          "description": "The text for the cancel button"
        },
        {
          "name": "custom-footer",
          "type": "boolean",
          "mutable": false,
          "attr": "custom-footer",
          "reflectToAttr": false,
          "docs": "Enable custom footer",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "Enable custom footer"
        },
        {
          "name": "description",
          "type": "string",
          "mutable": false,
          "attr": "description",
          "reflectToAttr": false,
          "docs": "The title text to be displayed on the modal",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "The title text to be displayed on the modal"
        },
        {
          "name": "hide-footer",
          "type": "boolean",
          "mutable": false,
          "attr": "hide-footer",
          "reflectToAttr": false,
          "docs": "Hides the footer",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "Hides the footer"
        },
        {
          "name": "icon",
          "type": "string",
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "The icon to be displayed with the title",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "''",
          "description": "The icon to be displayed with the title"
        },
        {
          "name": "size",
          "type": "\"large\" | \"small\" | \"standard\"",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Size of the modal",
          "docsTags": [],
          "default": "'standard'",
          "values": [
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            },
            {
              "value": "standard",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "'standard'",
          "description": "Size of the modal"
        },
        {
          "name": "success-text",
          "type": "string",
          "mutable": false,
          "attr": "success-text",
          "reflectToAttr": false,
          "docs": "The text for the success button",
          "docsTags": [],
          "default": "'OK'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "'OK'",
          "description": "The text for the success button"
        },
        {
          "name": "title-text",
          "type": "string",
          "mutable": false,
          "attr": "title-text",
          "reflectToAttr": false,
          "docs": "The title text to be displayed on the modal",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "The title text to be displayed on the modal"
        },
        {
          "name": "visible",
          "type": "boolean",
          "mutable": true,
          "attr": "visible",
          "reflectToAttr": true,
          "docs": "Toggle the visibility of the modal",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "Toggle the visibility of the modal"
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "fwAction",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the default action button is clicked.",
          "docsTags": [],
          "name": "fwAction",
          "description": "Triggered when the default action button is clicked.",
          "type": "void"
        },
        {
          "event": "fwClosed",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when modal is closed.",
          "docsTags": [],
          "name": "fwClosed",
          "description": "Triggered when modal is closed.",
          "type": "void"
        }
      ],
      "cssProperties": [],
      "slots": [],
      "dependents": [],
      "dependencies": [
        "fw-icon",
        "fw-button"
      ],
      "dependencyGraph": {
        "fw-modal": [
          "fw-icon",
          "fw-button"
        ]
      }
    },
    {
      "filePath": "src/components/radio/radio.tsx",
      "encapsulation": "shadow",
      "tag": "fw-radio",
      "name": "fw-radio",
      "readme": "# Radio (fw-radio)\n\nfw-radio displays a radio button on the user interface and enables assigning a state (selected or deselected) to it. In the selected state, the button displayed is highlighted. fw-radio provides child elements for fw-radio-group, to populate the Radio Group component’s list. \n\n## Usage\n\n```html live\n<fw-radio checked label=\"Select to agree\">Agree or Disagree</fw-radio><br><br>\n<fw-radio checked disabled value=\"dr\">Disable radio</fw-radio>\n```\n",
      "description": "fw-radio displays a radio button on the user interface and enables assigning a state (selected or deselected) to it. In the selected state, the button displayed is highlighted. fw-radio provides child elements for fw-radio-group, to populate the Radio Group component’s list.",
      "docsTags": [],
      "usage": {},
      "properties": [
        {
          "name": "checked",
          "type": "boolean",
          "mutable": true,
          "attr": "checked",
          "reflectToAttr": true,
          "docs": "Sets the state to selected. If the attribute’s value is undefined, the value is set to false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Sets the state to selected. If the attribute’s value is undefined, the value is set to false."
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": true,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "Disables the component on the interface. If the attribute’s value is undefined, the value is set to false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Disables the component on the interface. If the attribute’s value is undefined, the value is set to false."
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Label displayed on the interface, for the component.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Label displayed on the interface, for the component."
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Name of the component, saved as part of form data.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Name of the component, saved as part of form data."
        },
        {
          "name": "value",
          "type": "string",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Identifier corresponding to the component, that is saved when the form data is saved.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Identifier corresponding to the component, that is saved when the form data is saved."
        }
      ],
      "attributes": [
        {
          "name": "checked",
          "type": "boolean",
          "mutable": true,
          "attr": "checked",
          "reflectToAttr": true,
          "docs": "Sets the state to selected. If the attribute’s value is undefined, the value is set to false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "Sets the state to selected. If the attribute’s value is undefined, the value is set to false."
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": true,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "Disables the component on the interface. If the attribute’s value is undefined, the value is set to false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "Disables the component on the interface. If the attribute’s value is undefined, the value is set to false."
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Label displayed on the interface, for the component.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "''",
          "description": "Label displayed on the interface, for the component."
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Name of the component, saved as part of form data.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "''",
          "description": "Name of the component, saved as part of form data."
        },
        {
          "name": "value",
          "type": "string",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Identifier corresponding to the component, that is saved when the form data is saved.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "''",
          "description": "Identifier corresponding to the component, that is saved when the form data is saved."
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "fwBlur",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the radio button loses focus.",
          "docsTags": [],
          "name": "fwBlur",
          "description": "Triggered when the radio button loses focus.",
          "type": "void"
        },
        {
          "event": "fwDeselect",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the radio button in focus is cleared.",
          "docsTags": [],
          "name": "fwDeselect",
          "description": "Triggered when the radio button in focus is cleared.",
          "type": "any"
        },
        {
          "event": "fwFocus",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the radio button comes into focus.",
          "docsTags": [],
          "name": "fwFocus",
          "description": "Triggered when the radio button comes into focus.",
          "type": "void"
        },
        {
          "event": "fwSelect",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the radio button in focus is selected.",
          "docsTags": [],
          "name": "fwSelect",
          "description": "Triggered when the radio button in focus is selected.",
          "type": "any"
        }
      ],
      "cssProperties": [],
      "slots": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/radio-group/radio-group.tsx",
      "encapsulation": "none",
      "tag": "fw-radio-group",
      "name": "fw-radio-group",
      "readme": "# Radio Group (fw-radio-group)\nfw-radio-group displays a group of options with radio buttons and enables selection of one option from the list. \n\n## Usage\n\n```html live\n<fw-radio-group name=\"Profile\" value=\"au\" allow-empty>\n  <fw-radio value=\"au\">Auditory</fw-radio>\n  <fw-radio value=\"vi\">Visual</fw-radio>\n  <fw-radio value=\"re\">Restless</fw-radio>\n</fw-radio-group>\n```\n\n",
      "description": "fw-radio-group displays a group of options with radio buttons and enables selection of one option from the list.",
      "docsTags": [],
      "usage": {},
      "properties": [
        {
          "name": "allowEmpty",
          "type": "boolean",
          "mutable": false,
          "attr": "allow-empty",
          "reflectToAttr": false,
          "docs": "If true, a radio group can be saved without selecting any option. If an option is selected, the selection can be cleared. If the attribute’s value is undefined, the value is set to false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "If true, a radio group can be saved without selecting any option. If an option is selected, the selection can be cleared. If the attribute’s value is undefined, the value is set to false."
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Name of the component, saved as part of form data.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Name of the component, saved as part of form data."
        },
        {
          "name": "value",
          "type": "any",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Default option that is selected when the radio group is displayed on the interface. Must be a valid value corresponding to the fw-radio components used in the Radio Group.",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": true,
          "required": false,
          "description": "Default option that is selected when the radio group is displayed on the interface. Must be a valid value corresponding to the fw-radio components used in the Radio Group."
        }
      ],
      "attributes": [
        {
          "name": "allow-empty",
          "type": "boolean",
          "mutable": false,
          "attr": "allow-empty",
          "reflectToAttr": false,
          "docs": "If true, a radio group can be saved without selecting any option. If an option is selected, the selection can be cleared. If the attribute’s value is undefined, the value is set to false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "If true, a radio group can be saved without selecting any option. If an option is selected, the selection can be cleared. If the attribute’s value is undefined, the value is set to false."
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Name of the component, saved as part of form data.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "''",
          "description": "Name of the component, saved as part of form data."
        },
        {
          "name": "value",
          "type": "any",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Default option that is selected when the radio group is displayed on the interface. Must be a valid value corresponding to the fw-radio components used in the Radio Group.",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": true,
          "required": false,
          "description": "Default option that is selected when the radio group is displayed on the interface. Must be a valid value corresponding to the fw-radio components used in the Radio Group."
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "fwChange",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when an option in the Radio Group is selected or deselected.",
          "docsTags": [],
          "name": "fwChange",
          "description": "Triggered when an option in the Radio Group is selected or deselected.",
          "type": "any"
        }
      ],
      "cssProperties": [],
      "slots": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/select/select.tsx",
      "encapsulation": "shadow",
      "tag": "fw-select",
      "name": "fw-select",
      "readme": "# Select (fw-select)\nfw-select displays a list or drop-down box that enables selection of an option or multiple options from an available list of values.\n\n## Usage\n\n```html live\n<fw-select label=\"House Name\" required=\"true\" value=\"1\" placeholder=\"Your choice\" state-text=\"Select singluar option\">\n  <fw-select-option value=\"1\">Starks</fw-select-option>\n  <fw-select-option value=\"2\">Lannisters</fw-select-option>\n</fw-select>\n<fw-select label=\"Names\" value=\"1\" placeholder=\"Your choices\" state-text=\"Select multiple options\" multiple>\n  <fw-select-option value=\"1\" selected>Starks</fw-select-option>\n  <fw-select-option value=\"2\" >Lannisters</fw-select-option>\n  <fw-select-option value=\"3\">Sand</fw-select-option>\n  <fw-select-option value=\"4\">Greyjoys</fw-select-option>\n  <fw-select-option value=\"5\">Tyrell</fw-select-option>\n</fw-select>\n```\n\n",
      "description": "fw-select displays a list or drop-down box that enables selection of an option or multiple options from an available list of values.",
      "docsTags": [],
      "usage": {},
      "properties": [
        {
          "name": "autofocus",
          "type": "boolean",
          "mutable": false,
          "attr": "autofocus",
          "reflectToAttr": false,
          "docs": "If true, the select component is auto focused on the page",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "If true, the select component is auto focused on the page"
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Disables the component on the interface. If the attribute’s value is undefined, the value is set to false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Disables the component on the interface. If the attribute’s value is undefined, the value is set to false."
        },
        {
          "name": "forceSelect",
          "type": "boolean",
          "mutable": false,
          "attr": "force-select",
          "reflectToAttr": false,
          "docs": "If true, the user must select a value. The default value is not displayed.",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "If true, the user must select a value. The default value is not displayed."
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Label displayed on the interface, for the component.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Label displayed on the interface, for the component."
        },
        {
          "name": "max",
          "type": "number",
          "mutable": false,
          "attr": "max",
          "reflectToAttr": false,
          "docs": "Works with `multiple` enabled. Configures the maximum number of options that can be selected with a multi-select component.",
          "docsTags": [],
          "default": "Number.MAX_VALUE",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Works with `multiple` enabled. Configures the maximum number of options that can be selected with a multi-select component."
        },
        {
          "name": "multiple",
          "type": "boolean",
          "mutable": false,
          "attr": "multiple",
          "reflectToAttr": false,
          "docs": "Enables selection of multiple options. If the attribute’s value is undefined, the value is set to false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Enables selection of multiple options. If the attribute’s value is undefined, the value is set to false."
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Name of the component, saved as part of form data.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Name of the component, saved as part of form data."
        },
        {
          "name": "placeholder",
          "type": "string",
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "Text displayed in the list box before an option is selected.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "Text displayed in the list box before an option is selected."
        },
        {
          "name": "readonly",
          "type": "boolean",
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "If true, the user cannot modify the default value selected. If the attribute's value is undefined, the value is set to true.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "If true, the user cannot modify the default value selected. If the attribute's value is undefined, the value is set to true."
        },
        {
          "name": "required",
          "type": "boolean",
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "Specifies the select field as a mandatory field and displays an asterisk next to the label. If the attribute’s value is undefined, the value is set to false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Specifies the select field as a mandatory field and displays an asterisk next to the label. If the attribute’s value is undefined, the value is set to false."
        },
        {
          "name": "state",
          "type": "\"error\" | \"normal\" | \"warning\"",
          "mutable": false,
          "attr": "state",
          "reflectToAttr": false,
          "docs": "Theme based on which the list box is styled.",
          "docsTags": [],
          "default": "'normal'",
          "values": [
            {
              "value": "error",
              "type": "string"
            },
            {
              "value": "normal",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Theme based on which the list box is styled."
        },
        {
          "name": "stateText",
          "type": "string",
          "mutable": false,
          "attr": "state-text",
          "reflectToAttr": false,
          "docs": "Descriptive or instructional text displayed below the list box.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Descriptive or instructional text displayed below the list box."
        },
        {
          "name": "type",
          "type": "\"number\" | \"text\"",
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "Type of option accepted as the input value. If a user tries to enter an option other than the specified type, the list is not populated.",
          "docsTags": [],
          "default": "'text'",
          "values": [
            {
              "value": "number",
              "type": "string"
            },
            {
              "value": "text",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Type of option accepted as the input value. If a user tries to enter an option other than the specified type, the list is not populated."
        },
        {
          "name": "value",
          "type": "any",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Value of the option that is displayed as the default selection, in the list box. Must be a valid value corresponding to the fw-select-option components used in Select.",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Value of the option that is displayed as the default selection, in the list box. Must be a valid value corresponding to the fw-select-option components used in Select."
        }
      ],
      "attributes": [
        {
          "name": "autofocus",
          "type": "boolean",
          "mutable": false,
          "attr": "autofocus",
          "reflectToAttr": false,
          "docs": "If true, the select component is auto focused on the page",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "If true, the select component is auto focused on the page"
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Disables the component on the interface. If the attribute’s value is undefined, the value is set to false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "Disables the component on the interface. If the attribute’s value is undefined, the value is set to false."
        },
        {
          "name": "force-select",
          "type": "boolean",
          "mutable": false,
          "attr": "force-select",
          "reflectToAttr": false,
          "docs": "If true, the user must select a value. The default value is not displayed.",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "true",
          "description": "If true, the user must select a value. The default value is not displayed."
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Label displayed on the interface, for the component.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "''",
          "description": "Label displayed on the interface, for the component."
        },
        {
          "name": "max",
          "type": "number",
          "mutable": false,
          "attr": "max",
          "reflectToAttr": false,
          "docs": "Works with `multiple` enabled. Configures the maximum number of options that can be selected with a multi-select component.",
          "docsTags": [],
          "default": "Number.MAX_VALUE",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "Number.MAX_VALUE",
          "description": "Works with `multiple` enabled. Configures the maximum number of options that can be selected with a multi-select component."
        },
        {
          "name": "multiple",
          "type": "boolean",
          "mutable": false,
          "attr": "multiple",
          "reflectToAttr": false,
          "docs": "Enables selection of multiple options. If the attribute’s value is undefined, the value is set to false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "Enables selection of multiple options. If the attribute’s value is undefined, the value is set to false."
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Name of the component, saved as part of form data.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "''",
          "description": "Name of the component, saved as part of form data."
        },
        {
          "name": "placeholder",
          "type": "string",
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "Text displayed in the list box before an option is selected.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "Text displayed in the list box before an option is selected."
        },
        {
          "name": "readonly",
          "type": "boolean",
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "If true, the user cannot modify the default value selected. If the attribute's value is undefined, the value is set to true.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "If true, the user cannot modify the default value selected. If the attribute's value is undefined, the value is set to true."
        },
        {
          "name": "required",
          "type": "boolean",
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "Specifies the select field as a mandatory field and displays an asterisk next to the label. If the attribute’s value is undefined, the value is set to false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "Specifies the select field as a mandatory field and displays an asterisk next to the label. If the attribute’s value is undefined, the value is set to false."
        },
        {
          "name": "state",
          "type": "\"error\" | \"normal\" | \"warning\"",
          "mutable": false,
          "attr": "state",
          "reflectToAttr": false,
          "docs": "Theme based on which the list box is styled.",
          "docsTags": [],
          "default": "'normal'",
          "values": [
            {
              "value": "error",
              "type": "string"
            },
            {
              "value": "normal",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "'normal'",
          "description": "Theme based on which the list box is styled."
        },
        {
          "name": "state-text",
          "type": "string",
          "mutable": false,
          "attr": "state-text",
          "reflectToAttr": false,
          "docs": "Descriptive or instructional text displayed below the list box.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "''",
          "description": "Descriptive or instructional text displayed below the list box."
        },
        {
          "name": "type",
          "type": "\"number\" | \"text\"",
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "Type of option accepted as the input value. If a user tries to enter an option other than the specified type, the list is not populated.",
          "docsTags": [],
          "default": "'text'",
          "values": [
            {
              "value": "number",
              "type": "string"
            },
            {
              "value": "text",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "'text'",
          "description": "Type of option accepted as the input value. If a user tries to enter an option other than the specified type, the list is not populated."
        },
        {
          "name": "value",
          "type": "any",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Value of the option that is displayed as the default selection, in the list box. Must be a valid value corresponding to the fw-select-option components used in Select.",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Value of the option that is displayed as the default selection, in the list box. Must be a valid value corresponding to the fw-select-option components used in Select."
        }
      ],
      "methods": [
        {
          "name": "getSelectedItem",
          "returns": {
            "type": "Promise<any>",
            "docs": ""
          },
          "signature": "getSelectedItem() => Promise<any>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        },
        {
          "name": "setSelectedValues",
          "returns": {
            "type": "Promise<any>",
            "docs": ""
          },
          "signature": "setSelectedValues(values: string[]) => Promise<any>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "fwBlur",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the list box loses focus.",
          "docsTags": [],
          "name": "fwBlur",
          "description": "Triggered when the list box loses focus.",
          "type": "any"
        },
        {
          "event": "fwChange",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when a value is selected or deselected from the list box options.",
          "docsTags": [],
          "name": "fwChange",
          "description": "Triggered when a value is selected or deselected from the list box options.",
          "type": "any"
        },
        {
          "event": "fwFocus",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the list box comes into focus.",
          "docsTags": [],
          "name": "fwFocus",
          "description": "Triggered when the list box comes into focus.",
          "type": "any"
        }
      ],
      "cssProperties": [
        {
          "name": "--max-height",
          "annotation": "prop",
          "docs": "Maximum height of the select component",
          "description": "Maximum height of the select component"
        },
        {
          "name": "--min-height",
          "annotation": "prop",
          "docs": "Minimum height of the select component",
          "description": "Minimum height of the select component"
        }
      ],
      "slots": [],
      "dependents": [
        "fw-datepicker",
        "fw-timepicker"
      ],
      "dependencies": [
        "fw-tag",
        "fw-select-option"
      ],
      "dependencyGraph": {
        "fw-select": [
          "fw-tag",
          "fw-select-option"
        ],
        "fw-datepicker": [
          "fw-select"
        ],
        "fw-timepicker": [
          "fw-select"
        ]
      }
    },
    {
      "filePath": "src/components/select-option/select-option.tsx",
      "encapsulation": "shadow",
      "tag": "fw-select-option",
      "name": "fw-select-option",
      "readme": "# Select Option (fw-select-option)\n\nfw-select-option provides child elements for fw-select, to populate the Select component’s list or drop-down box with values. If fw-select-option is used without the value attribute, when the form data is saved, the value of fw-select is the selected option’s text. \n\n## Usage\n```html live\n<fw-select-option selected=\"true\">I am the chosen one</fw-select-option>\n<fw-select-option html html-content=\"<b>Me, nein</b>\"></fw-select-option>\n<fw-select-option>I am another option</fw-select-option>\n```\n",
      "description": "fw-select-option provides child elements for fw-select, to populate the Select component’s list or drop-down box with values. If fw-select-option is used without the value attribute, when the form data is saved, the value of fw-select is the selected option’s text.",
      "docsTags": [],
      "usage": {},
      "properties": [
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": true,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "Sets the state of the option to disabled. The selected option is disabled and greyed out. If the attribute’s value is undefined, the value is set to false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Sets the state of the option to disabled. The selected option is disabled and greyed out. If the attribute’s value is undefined, the value is set to false."
        },
        {
          "name": "html",
          "type": "boolean",
          "mutable": true,
          "attr": "html",
          "reflectToAttr": true,
          "docs": "States that the option is an HTML value. If the attribute's value is undefined, the value is set to true.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "States that the option is an HTML value. If the attribute's value is undefined, the value is set to true."
        },
        {
          "name": "htmlContent",
          "type": "string",
          "mutable": false,
          "attr": "html-content",
          "reflectToAttr": false,
          "docs": "HTML content that is displayed as the option.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "HTML content that is displayed as the option."
        },
        {
          "name": "optionText",
          "type": "string",
          "mutable": false,
          "attr": "option-text",
          "reflectToAttr": true,
          "docs": "Alternate text displayed on the interface, in place of the actual HTML content.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Alternate text displayed on the interface, in place of the actual HTML content."
        },
        {
          "name": "selected",
          "type": "boolean",
          "mutable": true,
          "attr": "selected",
          "reflectToAttr": true,
          "docs": "Sets the state of the option to selected. The selected option is highlighted and a check mark is displayed next to it. If the attribute’s value is undefined, the value is set to false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Sets the state of the option to selected. The selected option is highlighted and a check mark is displayed next to it. If the attribute’s value is undefined, the value is set to false."
        },
        {
          "name": "value",
          "type": "string",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "Value corresponding to the option, that is saved  when the form data is saved.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Value corresponding to the option, that is saved  when the form data is saved."
        }
      ],
      "attributes": [
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": true,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "Sets the state of the option to disabled. The selected option is disabled and greyed out. If the attribute’s value is undefined, the value is set to false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "Sets the state of the option to disabled. The selected option is disabled and greyed out. If the attribute’s value is undefined, the value is set to false."
        },
        {
          "name": "html",
          "type": "boolean",
          "mutable": true,
          "attr": "html",
          "reflectToAttr": true,
          "docs": "States that the option is an HTML value. If the attribute's value is undefined, the value is set to true.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "States that the option is an HTML value. If the attribute's value is undefined, the value is set to true."
        },
        {
          "name": "html-content",
          "type": "string",
          "mutable": false,
          "attr": "html-content",
          "reflectToAttr": false,
          "docs": "HTML content that is displayed as the option.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "HTML content that is displayed as the option."
        },
        {
          "name": "option-text",
          "type": "string",
          "mutable": false,
          "attr": "option-text",
          "reflectToAttr": true,
          "docs": "Alternate text displayed on the interface, in place of the actual HTML content.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Alternate text displayed on the interface, in place of the actual HTML content."
        },
        {
          "name": "selected",
          "type": "boolean",
          "mutable": true,
          "attr": "selected",
          "reflectToAttr": true,
          "docs": "Sets the state of the option to selected. The selected option is highlighted and a check mark is displayed next to it. If the attribute’s value is undefined, the value is set to false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "Sets the state of the option to selected. The selected option is highlighted and a check mark is displayed next to it. If the attribute’s value is undefined, the value is set to false."
        },
        {
          "name": "value",
          "type": "string",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "Value corresponding to the option, that is saved  when the form data is saved.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Value corresponding to the option, that is saved  when the form data is saved."
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "fwSelected",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when an option is selected.",
          "docsTags": [],
          "name": "fwSelected",
          "description": "Triggered when an option is selected.",
          "type": "any"
        }
      ],
      "cssProperties": [],
      "slots": [],
      "dependents": [
        "fw-datepicker",
        "fw-select",
        "fw-timepicker"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "fw-datepicker": [
          "fw-select-option"
        ],
        "fw-select": [
          "fw-select-option"
        ],
        "fw-timepicker": [
          "fw-select-option"
        ]
      }
    },
    {
      "filePath": "src/components/spinner/spinner.tsx",
      "encapsulation": "shadow",
      "tag": "fw-spinner",
      "name": "fw-spinner",
      "readme": "# Spinner (fw-spinner)\nfw-spinner displays a continuous loader on the user interface, to indicate that a system is processing an entity.\n\n## Usage\n\n```html live\n<fw-label value=\"A small loader\" color=\"yellow\"></fw-label><br/>\n<fw-spinner size=\"small\"></fw-spinner><br/><br/>\n<fw-label value=\"A medium sized loader\" color=\"yellow\"></fw-label><br/>\n<fw-spinner size=\"medium\" color=\"green\"></fw-spinner>\n```\n",
      "description": "fw-spinner displays a continuous loader on the user interface, to indicate that a system is processing an entity.",
      "docsTags": [],
      "usage": {},
      "properties": [
        {
          "name": "color",
          "type": "string",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "Color in which the loader is displayed, specified as a standard CSS color.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Color in which the loader is displayed, specified as a standard CSS color."
        },
        {
          "name": "size",
          "type": "\"default\" | \"large\" | \"medium\" | \"small\"",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Size of the loader.",
          "docsTags": [],
          "default": "'default'",
          "values": [
            {
              "value": "default",
              "type": "string"
            },
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Size of the loader."
        }
      ],
      "attributes": [
        {
          "name": "color",
          "type": "string",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "Color in which the loader is displayed, specified as a standard CSS color.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "''",
          "description": "Color in which the loader is displayed, specified as a standard CSS color."
        },
        {
          "name": "size",
          "type": "\"default\" | \"large\" | \"medium\" | \"small\"",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Size of the loader.",
          "docsTags": [],
          "default": "'default'",
          "values": [
            {
              "value": "default",
              "type": "string"
            },
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "'default'",
          "description": "Size of the loader."
        }
      ],
      "methods": [],
      "events": [],
      "cssProperties": [
        {
          "name": "--spinner-color",
          "annotation": "prop",
          "docs": "Color of the spinner",
          "description": "Color of the spinner"
        }
      ],
      "slots": [],
      "dependents": [
        "fw-toast"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "fw-toast": [
          "fw-spinner"
        ]
      }
    },
    {
      "filePath": "src/components/tab/tab.tsx",
      "encapsulation": "shadow",
      "tag": "fw-tab",
      "name": "fw-tab",
      "readme": "# Tab (fw-tab)\n\nfw-tab provides child elements for fw-tabs, to enable tab style navigation.\n",
      "description": "fw-tab provides child elements for fw-tabs, to enable tab style navigation.",
      "docsTags": [],
      "usage": {},
      "properties": [
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Disables this tab",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Disables this tab"
        },
        {
          "name": "tabHeader",
          "type": "string",
          "mutable": false,
          "attr": "tab-header",
          "reflectToAttr": false,
          "docs": "Name of the tab displayed on the UI.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Name of the tab displayed on the UI."
        },
        {
          "name": "tabHeaderHtml",
          "type": "string",
          "mutable": false,
          "attr": "tab-header-html",
          "reflectToAttr": false,
          "docs": "HTML that can be rendered in tab header.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "HTML that can be rendered in tab header."
        }
      ],
      "attributes": [
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Disables this tab",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Disables this tab"
        },
        {
          "name": "tab-header",
          "type": "string",
          "mutable": false,
          "attr": "tab-header",
          "reflectToAttr": false,
          "docs": "Name of the tab displayed on the UI.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Name of the tab displayed on the UI."
        },
        {
          "name": "tab-header-html",
          "type": "string",
          "mutable": false,
          "attr": "tab-header-html",
          "reflectToAttr": false,
          "docs": "HTML that can be rendered in tab header.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "HTML that can be rendered in tab header."
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "propChanged",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when either tabHeader or tabHeaderHtml changes.",
          "docsTags": [],
          "name": "propChanged",
          "description": "Triggered when either tabHeader or tabHeaderHtml changes.",
          "type": "any"
        }
      ],
      "cssProperties": [],
      "slots": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/tabs/tabs.tsx",
      "encapsulation": "shadow",
      "tag": "fw-tabs",
      "name": "fw-tabs",
      "readme": "# Tabs (fw-tabs)\n\nfw-tabs displays a series of tabs on the user interface and enables tab-style navigation. The component doesn’t have any attributes that impart styling; it merely functions as a container for the tabs.\n\n## Usage\n\n```html live\n<fw-tabs>\n  <fw-tab tab-header=\"Personal\">\n    <fw-input\n  label=\"Name\"\n  icon-left=\"add-contact\"\n  state-text=\"Do not enter your user ID\"\n  state=\"warning\"\n  placeholder=\"Enter your official name\"\n  required\n  clear-input>\n</fw-input>\n<fw-button color=\"secondary\">Submit</fw-button>\n<fw-button color=\"secondary\">Save</fw-button>\n  </fw-tab>\n  <fw-tab tab-header=\"Official\">\n    <fw-select multiple label=\"Select location of preference\" required=\"true\">\n        <fw-select-option value=\"1\">Chennai</fw-select-option>\n        <fw-select-option value=\"2\">Bangalore</fw-select-option>\n        <fw-select-option value=\"3\">Hyderabad</fw-select-option>\n    </fw-select>\n    <fw-button color=\"secondary\">Submit</fw-button>\n    <fw-button color=\"secondary\">Save</fw-button>\n  </fw-tab>\n</fw-tabs>\n```\n\n",
      "description": "fw-tabs displays a series of tabs on the user interface and enables tab-style navigation. The component doesn’t have any attributes that impart styling; it merely functions as a container for the tabs.",
      "docsTags": [],
      "usage": {},
      "properties": [
        {
          "name": "activeTabIndex",
          "type": "number",
          "mutable": true,
          "attr": "active-tab-index",
          "reflectToAttr": true,
          "docs": "The index of the activated Tab(Starts from 0)",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false,
          "description": "The index of the activated Tab(Starts from 0)"
        }
      ],
      "attributes": [
        {
          "name": "active-tab-index",
          "type": "number",
          "mutable": true,
          "attr": "active-tab-index",
          "reflectToAttr": true,
          "docs": "The index of the activated Tab(Starts from 0)",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "0",
          "description": "The index of the activated Tab(Starts from 0)"
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "fwChange",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when a the view switches to a new tab.",
          "docsTags": [],
          "name": "fwChange",
          "description": "Triggered when a the view switches to a new tab.",
          "type": "any"
        }
      ],
      "cssProperties": [
        {
          "name": "--tab-header-font-size",
          "annotation": "prop",
          "docs": "tab-header font size in pixels",
          "description": "tab-header font size in pixels"
        },
        {
          "name": "--tabs-color-primary",
          "annotation": "prop",
          "docs": "tab-header font color",
          "description": "tab-header font color"
        }
      ],
      "slots": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/tag/tag.tsx",
      "encapsulation": "shadow",
      "tag": "fw-tag",
      "name": "fw-tag",
      "readme": "# Tag (fw-tag)\nfw-tag provides a child component that is used to enable selecting multiple options in the Select component. \n\n## Usage\n```html live\n<fw-tag text=\"Option\"></fw-tag>\n```\n",
      "description": "fw-tag provides a child component that is used to enable selecting multiple options in the Select component.",
      "docsTags": [],
      "usage": {},
      "properties": [
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "Sets the state of the tag to disabled. The close button is disabled. If the attribute’s value is undefined, the value is set to false.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Sets the state of the tag to disabled. The close button is disabled. If the attribute’s value is undefined, the value is set to false."
        },
        {
          "name": "text",
          "type": "string",
          "mutable": false,
          "attr": "text",
          "reflectToAttr": true,
          "docs": "Display text in the tag component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Display text in the tag component."
        },
        {
          "name": "value",
          "type": "string",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "Value associated with the tag component, that is saved when the form data is saved.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Value associated with the tag component, that is saved when the form data is saved."
        }
      ],
      "attributes": [
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "Sets the state of the tag to disabled. The close button is disabled. If the attribute’s value is undefined, the value is set to false.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Sets the state of the tag to disabled. The close button is disabled. If the attribute’s value is undefined, the value is set to false."
        },
        {
          "name": "text",
          "type": "string",
          "mutable": false,
          "attr": "text",
          "reflectToAttr": true,
          "docs": "Display text in the tag component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Display text in the tag component."
        },
        {
          "name": "value",
          "type": "string",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "Value associated with the tag component, that is saved when the form data is saved.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Value associated with the tag component, that is saved when the form data is saved."
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "fwClosed",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the tag is deselected.",
          "docsTags": [],
          "name": "fwClosed",
          "description": "Triggered when the tag is deselected.",
          "type": "any"
        }
      ],
      "cssProperties": [],
      "slots": [],
      "dependents": [
        "fw-select"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "fw-select": [
          "fw-tag"
        ]
      }
    },
    {
      "filePath": "src/components/textarea/textarea.tsx",
      "encapsulation": "shadow",
      "tag": "fw-textarea",
      "name": "fw-textarea",
      "readme": "# Textarea (fw-textarea)\nfw-textarea displays an input box on the user interface and enables assigning multi-line text value to it. The size of the input box is based on the cols and rows attributes.\n\n## Usage\n\n```html live\n<fw-textarea cols=75 rows=5 maxlength=190 minlength=5\n  label=\"Address\"\n  state-text=\"Do not enter your temporary address\"\n  state=\"warning\"\n  placeholder=\"Enter your permanent address\"\n  required>\n</fw-textarea>\n<fw-textarea cols=75 rows=5\n  label=\"Passcode\"\n  state-text=\"Passcode is incorrect\"\n  state=\"error\"\n  required>\n</fw-textarea>\n<fw-textarea cols=75 rows=5\n  label=\"Location identifier\"\nplaceholder=\"Enter landmark details\"\n  state=\"normal\">\n</fw-textarea>\n<fw-textarea cols=75 rows=1\n  label=\"Plot number\"\n  value=\"not applicable\"\n   disabled\n  state=\"normal\">\n</fw-textarea>\n```\n\n",
      "description": "fw-textarea displays an input box on the user interface and enables assigning multi-line text value to it. The size of the input box is based on the cols and rows attributes.",
      "docsTags": [],
      "usage": {},
      "properties": [
        {
          "name": "autofocus",
          "type": "boolean",
          "mutable": false,
          "attr": "autofocus",
          "reflectToAttr": false,
          "docs": "If true, the textarea is autofocused",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "If true, the textarea is autofocused"
        },
        {
          "name": "cols",
          "type": "number",
          "mutable": false,
          "attr": "cols",
          "reflectToAttr": false,
          "docs": "Width of the input box, specified as number of columns.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false,
          "description": "Width of the input box, specified as number of columns."
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Disables the text area on the interface. If the attribute’s value is undefined, the value is set to false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Disables the text area on the interface. If the attribute’s value is undefined, the value is set to false."
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Label displayed on the interface, for the component.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Label displayed on the interface, for the component."
        },
        {
          "name": "maxlength",
          "type": "number",
          "mutable": false,
          "attr": "maxlength",
          "reflectToAttr": false,
          "docs": "Maximum number of characters a user can enter in the input box.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false,
          "description": "Maximum number of characters a user can enter in the input box."
        },
        {
          "name": "minlength",
          "type": "number",
          "mutable": false,
          "attr": "minlength",
          "reflectToAttr": false,
          "docs": "Minimum number of characters a user must enter in the input box for the value to be valid.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false,
          "description": "Minimum number of characters a user must enter in the input box for the value to be valid."
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Name of the component, saved as part of form data.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Name of the component, saved as part of form data."
        },
        {
          "name": "placeholder",
          "type": "string",
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "Text displayed in the input box before a user enters a value.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "Text displayed in the input box before a user enters a value."
        },
        {
          "name": "readonly",
          "type": "boolean",
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "If true, the user cannot enter a value in the input box. If the attribute’s value is undefined, the value is set to false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "If true, the user cannot enter a value in the input box. If the attribute’s value is undefined, the value is set to false."
        },
        {
          "name": "required",
          "type": "boolean",
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "Specifies the input box as a mandatory field and displays an asterisk next to the label. If the attribute’s value is undefined, the value is set to false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Specifies the input box as a mandatory field and displays an asterisk next to the label. If the attribute’s value is undefined, the value is set to false."
        },
        {
          "name": "rows",
          "type": "number",
          "mutable": false,
          "attr": "rows",
          "reflectToAttr": false,
          "docs": "Height of the input box, specified as number of rows.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false,
          "description": "Height of the input box, specified as number of rows."
        },
        {
          "name": "state",
          "type": "\"error\" | \"normal\" | \"warning\"",
          "mutable": false,
          "attr": "state",
          "reflectToAttr": false,
          "docs": "Theme based on which the input box is styled.",
          "docsTags": [],
          "default": "'normal'",
          "values": [
            {
              "value": "error",
              "type": "string"
            },
            {
              "value": "normal",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Theme based on which the input box is styled."
        },
        {
          "name": "stateText",
          "type": "string",
          "mutable": false,
          "attr": "state-text",
          "reflectToAttr": false,
          "docs": "Descriptive or instructional text displayed below the input box.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Descriptive or instructional text displayed below the input box."
        },
        {
          "name": "value",
          "type": "string",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Default value displayed in the input box.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "Default value displayed in the input box."
        },
        {
          "name": "wrap",
          "type": "\"hard\" | \"soft\"",
          "mutable": false,
          "attr": "wrap",
          "reflectToAttr": false,
          "docs": "Type of text wrapping used by the input box. If the value is hard, the text in the textarea is wrapped (contains line breaks) when the form data is saved. If the value is soft, the text in the textarea is saved as a single line, when the form data is saved.",
          "docsTags": [],
          "default": "'soft'",
          "values": [
            {
              "value": "hard",
              "type": "string"
            },
            {
              "value": "soft",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Type of text wrapping used by the input box. If the value is hard, the text in the textarea is wrapped (contains line breaks) when the form data is saved. If the value is soft, the text in the textarea is saved as a single line, when the form data is saved."
        }
      ],
      "attributes": [
        {
          "name": "autofocus",
          "type": "boolean",
          "mutable": false,
          "attr": "autofocus",
          "reflectToAttr": false,
          "docs": "If true, the textarea is autofocused",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "If true, the textarea is autofocused"
        },
        {
          "name": "cols",
          "type": "number",
          "mutable": false,
          "attr": "cols",
          "reflectToAttr": false,
          "docs": "Width of the input box, specified as number of columns.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false,
          "description": "Width of the input box, specified as number of columns."
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Disables the text area on the interface. If the attribute’s value is undefined, the value is set to false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "Disables the text area on the interface. If the attribute’s value is undefined, the value is set to false."
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Label displayed on the interface, for the component.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "''",
          "description": "Label displayed on the interface, for the component."
        },
        {
          "name": "maxlength",
          "type": "number",
          "mutable": false,
          "attr": "maxlength",
          "reflectToAttr": false,
          "docs": "Maximum number of characters a user can enter in the input box.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false,
          "description": "Maximum number of characters a user can enter in the input box."
        },
        {
          "name": "minlength",
          "type": "number",
          "mutable": false,
          "attr": "minlength",
          "reflectToAttr": false,
          "docs": "Minimum number of characters a user must enter in the input box for the value to be valid.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false,
          "description": "Minimum number of characters a user must enter in the input box for the value to be valid."
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Name of the component, saved as part of form data.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "''",
          "description": "Name of the component, saved as part of form data."
        },
        {
          "name": "placeholder",
          "type": "string",
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "Text displayed in the input box before a user enters a value.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "Text displayed in the input box before a user enters a value."
        },
        {
          "name": "readonly",
          "type": "boolean",
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "If true, the user cannot enter a value in the input box. If the attribute’s value is undefined, the value is set to false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "If true, the user cannot enter a value in the input box. If the attribute’s value is undefined, the value is set to false."
        },
        {
          "name": "required",
          "type": "boolean",
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "Specifies the input box as a mandatory field and displays an asterisk next to the label. If the attribute’s value is undefined, the value is set to false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "Specifies the input box as a mandatory field and displays an asterisk next to the label. If the attribute’s value is undefined, the value is set to false."
        },
        {
          "name": "rows",
          "type": "number",
          "mutable": false,
          "attr": "rows",
          "reflectToAttr": false,
          "docs": "Height of the input box, specified as number of rows.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false,
          "description": "Height of the input box, specified as number of rows."
        },
        {
          "name": "state",
          "type": "\"error\" | \"normal\" | \"warning\"",
          "mutable": false,
          "attr": "state",
          "reflectToAttr": false,
          "docs": "Theme based on which the input box is styled.",
          "docsTags": [],
          "default": "'normal'",
          "values": [
            {
              "value": "error",
              "type": "string"
            },
            {
              "value": "normal",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "'normal'",
          "description": "Theme based on which the input box is styled."
        },
        {
          "name": "state-text",
          "type": "string",
          "mutable": false,
          "attr": "state-text",
          "reflectToAttr": false,
          "docs": "Descriptive or instructional text displayed below the input box.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "''",
          "description": "Descriptive or instructional text displayed below the input box."
        },
        {
          "name": "value",
          "type": "string",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Default value displayed in the input box.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "defaultValue": "''",
          "description": "Default value displayed in the input box."
        },
        {
          "name": "wrap",
          "type": "\"hard\" | \"soft\"",
          "mutable": false,
          "attr": "wrap",
          "reflectToAttr": false,
          "docs": "Type of text wrapping used by the input box. If the value is hard, the text in the textarea is wrapped (contains line breaks) when the form data is saved. If the value is soft, the text in the textarea is saved as a single line, when the form data is saved.",
          "docsTags": [],
          "default": "'soft'",
          "values": [
            {
              "value": "hard",
              "type": "string"
            },
            {
              "value": "soft",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "'soft'",
          "description": "Type of text wrapping used by the input box. If the value is hard, the text in the textarea is wrapped (contains line breaks) when the form data is saved. If the value is soft, the text in the textarea is saved as a single line, when the form data is saved."
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on a specific `fw-textarea`. Use this method instead of the global `input.focus()`.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "fwBlur",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the input box loses focus.",
          "docsTags": [],
          "name": "fwBlur",
          "description": "Triggered when the input box loses focus.",
          "type": "void"
        },
        {
          "event": "fwChange",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the value in the input box is modified.",
          "docsTags": [],
          "name": "fwChange",
          "description": "Triggered when the value in the input box is modified.",
          "type": "any"
        },
        {
          "event": "fwFocus",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the input box comes into focus.",
          "docsTags": [],
          "name": "fwFocus",
          "description": "Triggered when the input box comes into focus.",
          "type": "void"
        },
        {
          "event": "fwInput",
          "detail": "KeyboardEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when a value is entered in the input box.",
          "docsTags": [],
          "name": "fwInput",
          "description": "Triggered when a value is entered in the input box.",
          "type": "KeyboardEvent"
        }
      ],
      "cssProperties": [
        {
          "name": "--input-color",
          "annotation": "prop",
          "docs": "Color of the textarea input",
          "description": "Color of the textarea input"
        }
      ],
      "slots": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/timepicker/timepicker.tsx",
      "encapsulation": "shadow",
      "tag": "fw-timepicker",
      "name": "fw-timepicker",
      "readme": "# Timepicker (fw-timepicker)\nfw-timepicker displays a list or drop-down box with prepopulated time values and enables picking a time. The time values displayed in the list box are based on the fw-timepicker attribute values.\n\n\n## Usage\n\n```html live\n<fw-label value=\"An interval based picker\" color=\"yellow\"></fw-label><br/> \n<fw-timepicker interval=45 hour-format=\"hh:mm p\"></fw-timepicker>\n<fw-label value=\"A range based picker\" color=\"yellow\"></fw-label><br/>\n<fw-timepicker min-time=\"04:30\" max-time=\"08:30 PM\"></fw-timepicker>\n```",
      "description": "fw-timepicker displays a list or drop-down box with prepopulated time values and enables picking a time. The time values displayed in the list box are based on the fw-timepicker attribute values.",
      "docsTags": [],
      "usage": {},
      "properties": [
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Set true to disable the element",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Set true to disable the element"
        },
        {
          "name": "format",
          "type": "\"HH:mm\" | \"hh:mm A\"",
          "mutable": false,
          "attr": "format",
          "reflectToAttr": false,
          "docs": "Format in which time values are populated in the list box. If the value is hh:mm p, the time values are in the 12-hour format. If the value is hh:mm, the time values are in the 24-hr format.",
          "docsTags": [],
          "default": "'hh:mm A'",
          "values": [
            {
              "value": "HH:mm",
              "type": "string"
            },
            {
              "value": "hh:mm A",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Format in which time values are populated in the list box. If the value is hh:mm p, the time values are in the 12-hour format. If the value is hh:mm, the time values are in the 24-hr format."
        },
        {
          "name": "interval",
          "type": "number",
          "mutable": false,
          "attr": "interval",
          "reflectToAttr": false,
          "docs": "Time interval between the values displayed in the list, specified in minutes.",
          "docsTags": [],
          "default": "30",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Time interval between the values displayed in the list, specified in minutes."
        },
        {
          "name": "maxTime",
          "type": "string",
          "mutable": false,
          "attr": "max-time",
          "reflectToAttr": false,
          "docs": "Upper time-limit for the values displayed in the list. If this attribute’s value is in the hh:mm format, it is assumed to be hh:mm AM.",
          "docsTags": [],
          "default": "this.isMeridianFormat ? '11:30 PM' : '23:30'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "Upper time-limit for the values displayed in the list. If this attribute’s value is in the hh:mm format, it is assumed to be hh:mm AM."
        },
        {
          "name": "minTime",
          "type": "string",
          "mutable": false,
          "attr": "min-time",
          "reflectToAttr": false,
          "docs": "Lower time-limit for the values displayed in the list. If this attribute’s value is in the hh:mm format, it is assumed to be hh:mm AM.",
          "docsTags": [],
          "default": "this.isMeridianFormat ? '12:00 AM' : '00:00'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "Lower time-limit for the values displayed in the list. If this attribute’s value is in the hh:mm format, it is assumed to be hh:mm AM."
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Name of the component, saved as part of form data.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Name of the component, saved as part of form data."
        },
        {
          "name": "value",
          "type": "string",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Time output value",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "Time output value"
        }
      ],
      "attributes": [
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Set true to disable the element",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "Set true to disable the element"
        },
        {
          "name": "format",
          "type": "\"HH:mm\" | \"hh:mm A\"",
          "mutable": false,
          "attr": "format",
          "reflectToAttr": false,
          "docs": "Format in which time values are populated in the list box. If the value is hh:mm p, the time values are in the 12-hour format. If the value is hh:mm, the time values are in the 24-hr format.",
          "docsTags": [],
          "default": "'hh:mm A'",
          "values": [
            {
              "value": "HH:mm",
              "type": "string"
            },
            {
              "value": "hh:mm A",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "'hh:mm A'",
          "description": "Format in which time values are populated in the list box. If the value is hh:mm p, the time values are in the 12-hour format. If the value is hh:mm, the time values are in the 24-hr format."
        },
        {
          "name": "interval",
          "type": "number",
          "mutable": false,
          "attr": "interval",
          "reflectToAttr": false,
          "docs": "Time interval between the values displayed in the list, specified in minutes.",
          "docsTags": [],
          "default": "30",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "30",
          "description": "Time interval between the values displayed in the list, specified in minutes."
        },
        {
          "name": "max-time",
          "type": "string",
          "mutable": false,
          "attr": "max-time",
          "reflectToAttr": false,
          "docs": "Upper time-limit for the values displayed in the list. If this attribute’s value is in the hh:mm format, it is assumed to be hh:mm AM.",
          "docsTags": [],
          "default": "this.isMeridianFormat ? '11:30 PM' : '23:30'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "defaultValue": "this.isMeridianFormat ? '11:30 PM' : '23:30'",
          "description": "Upper time-limit for the values displayed in the list. If this attribute’s value is in the hh:mm format, it is assumed to be hh:mm AM."
        },
        {
          "name": "min-time",
          "type": "string",
          "mutable": false,
          "attr": "min-time",
          "reflectToAttr": false,
          "docs": "Lower time-limit for the values displayed in the list. If this attribute’s value is in the hh:mm format, it is assumed to be hh:mm AM.",
          "docsTags": [],
          "default": "this.isMeridianFormat ? '12:00 AM' : '00:00'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "defaultValue": "this.isMeridianFormat ? '12:00 AM' : '00:00'",
          "description": "Lower time-limit for the values displayed in the list. If this attribute’s value is in the hh:mm format, it is assumed to be hh:mm AM."
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Name of the component, saved as part of form data.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "''",
          "description": "Name of the component, saved as part of form data."
        },
        {
          "name": "value",
          "type": "string",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Time output value",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "description": "Time output value"
        }
      ],
      "methods": [],
      "events": [],
      "cssProperties": [],
      "slots": [],
      "dependents": [],
      "dependencies": [
        "fw-select",
        "fw-select-option"
      ],
      "dependencyGraph": {
        "fw-timepicker": [
          "fw-select",
          "fw-select-option"
        ],
        "fw-select": [
          "fw-tag",
          "fw-select-option"
        ]
      }
    },
    {
      "filePath": "src/components/toast/toast.tsx",
      "encapsulation": "shadow",
      "tag": "fw-toast",
      "name": "fw-toast",
      "readme": "# Toast (fw-toast)\n\nToasts are used to show pop-up messages that lasts on the screen for a while. Use them to show users alerts or messages.\n\n## Usage\n\n```html live\n<fw-toast id=\"type_toast\"></fw-toast>\n<fw-button onClick=\"document.querySelector('#type_toast').trigger({type:'success', content: 'Successfullly triggered'})\">Success</fw-button>\n<fw-button onClick=\"document.querySelector('#type_toast').trigger({type:'error', content:'something went wrong!'})\">Error</fw-button>\n<fw-button onClick=\"document.querySelector('#type_toast').trigger({type:'warning', content:'This is a warning!'})\">Warning</fw-button>\n<fw-button onClick=\"document.querySelector('#type_toast').trigger({type:'inprogress', content:'Request is in progress'})\">Inprogress</fw-button>\n```\n",
      "description": "Toasts are used to show pop-up messages that lasts on the screen for a while. Use them to show users alerts or messages.",
      "docsTags": [],
      "usage": {},
      "properties": [
        {
          "name": "actionLinkText",
          "type": "string",
          "mutable": false,
          "attr": "action-link-text",
          "reflectToAttr": false,
          "docs": "The Content of the action link",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "The Content of the action link"
        },
        {
          "name": "content",
          "type": "string",
          "mutable": false,
          "attr": "content",
          "reflectToAttr": false,
          "docs": "The content to be diaplyed in toast",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "The content to be diaplyed in toast"
        },
        {
          "name": "pauseOnHover",
          "type": "boolean",
          "mutable": false,
          "attr": "pause-on-hover",
          "reflectToAttr": false,
          "docs": "Pause the toast from hiding on mouse hover",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Pause the toast from hiding on mouse hover"
        },
        {
          "name": "position",
          "type": "\"top-center\" | \"top-left\" | \"top-right\"",
          "mutable": false,
          "attr": "position",
          "reflectToAttr": false,
          "docs": "position of the toast notification in screen",
          "docsTags": [],
          "default": "'top-center'",
          "values": [
            {
              "value": "top-center",
              "type": "string"
            },
            {
              "value": "top-left",
              "type": "string"
            },
            {
              "value": "top-right",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "position of the toast notification in screen"
        },
        {
          "name": "sticky",
          "type": "boolean",
          "mutable": false,
          "attr": "sticky",
          "reflectToAttr": false,
          "docs": "won't close automatically",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "won't close automatically"
        },
        {
          "name": "timeout",
          "type": "number",
          "mutable": false,
          "attr": "timeout",
          "reflectToAttr": false,
          "docs": "Time duration of the toast visibility",
          "docsTags": [],
          "default": "4000",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Time duration of the toast visibility"
        },
        {
          "name": "type",
          "type": "\"error\" | \"inprogress\" | \"success\" | \"warning\"",
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "Type of the toast - success,failure, warning, inprogress",
          "docsTags": [],
          "default": "'warning'",
          "values": [
            {
              "value": "error",
              "type": "string"
            },
            {
              "value": "inprogress",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Type of the toast - success,failure, warning, inprogress"
        }
      ],
      "attributes": [
        {
          "name": "action-link-text",
          "type": "string",
          "mutable": false,
          "attr": "action-link-text",
          "reflectToAttr": false,
          "docs": "The Content of the action link",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "''",
          "description": "The Content of the action link"
        },
        {
          "name": "content",
          "type": "string",
          "mutable": false,
          "attr": "content",
          "reflectToAttr": false,
          "docs": "The content to be diaplyed in toast",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "The content to be diaplyed in toast"
        },
        {
          "name": "pause-on-hover",
          "type": "boolean",
          "mutable": false,
          "attr": "pause-on-hover",
          "reflectToAttr": false,
          "docs": "Pause the toast from hiding on mouse hover",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Pause the toast from hiding on mouse hover"
        },
        {
          "name": "position",
          "type": "\"top-center\" | \"top-left\" | \"top-right\"",
          "mutable": false,
          "attr": "position",
          "reflectToAttr": false,
          "docs": "position of the toast notification in screen",
          "docsTags": [],
          "default": "'top-center'",
          "values": [
            {
              "value": "top-center",
              "type": "string"
            },
            {
              "value": "top-left",
              "type": "string"
            },
            {
              "value": "top-right",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "'top-center'",
          "description": "position of the toast notification in screen"
        },
        {
          "name": "sticky",
          "type": "boolean",
          "mutable": false,
          "attr": "sticky",
          "reflectToAttr": false,
          "docs": "won't close automatically",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "won't close automatically"
        },
        {
          "name": "timeout",
          "type": "number",
          "mutable": false,
          "attr": "timeout",
          "reflectToAttr": false,
          "docs": "Time duration of the toast visibility",
          "docsTags": [],
          "default": "4000",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "4000",
          "description": "Time duration of the toast visibility"
        },
        {
          "name": "type",
          "type": "\"error\" | \"inprogress\" | \"success\" | \"warning\"",
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "Type of the toast - success,failure, warning, inprogress",
          "docsTags": [],
          "default": "'warning'",
          "values": [
            {
              "value": "error",
              "type": "string"
            },
            {
              "value": "inprogress",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "'warning'",
          "description": "Type of the toast - success,failure, warning, inprogress"
        }
      ],
      "methods": [
        {
          "name": "trigger",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "trigger(configs: object) => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "fwLinkClick",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the action link clicked.",
          "docsTags": [],
          "name": "fwLinkClick",
          "description": "Triggered when the action link clicked.",
          "type": "any"
        }
      ],
      "cssProperties": [],
      "slots": [],
      "dependents": [],
      "dependencies": [
        "fw-spinner",
        "fw-icon"
      ],
      "dependencyGraph": {
        "fw-toast": [
          "fw-spinner",
          "fw-icon"
        ]
      }
    },
    {
      "filePath": "src/components/toggle/toggle.tsx",
      "encapsulation": "shadow",
      "tag": "fw-toggle",
      "name": "fw-toggle",
      "readme": "# Toggle (fw-toggle)\n\nfw-toggle displays an input control that enables modifying an element’s state between two settings. \n\n## Usage\n\n```html live\n<fw-toggle size=\"small\">Small not selected</fw-toggle><br><br>\n<fw-toggle size=\"medium\" checked>Mid-sized and selected</fw-toggle>\n```\n",
      "description": "fw-toggle displays an input control that enables modifying an element’s state between two settings.",
      "docsTags": [],
      "usage": {},
      "properties": [
        {
          "name": "checked",
          "type": "boolean",
          "mutable": false,
          "attr": "checked",
          "reflectToAttr": false,
          "docs": "Sets the selected state as the default state. If the attribute’s value is undefined, the value is set to false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Sets the selected state as the default state. If the attribute’s value is undefined, the value is set to false."
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Specifies whether to disable the control on the interface. If the attribute’s value is undefined, the value is set to false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Specifies whether to disable the control on the interface. If the attribute’s value is undefined, the value is set to false."
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Name of the component, saved as part of the form data.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Name of the component, saved as part of the form data."
        },
        {
          "name": "size",
          "type": "\"large\" | \"medium\" | \"small\"",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Size of the input control.",
          "docsTags": [],
          "default": "'medium'",
          "values": [
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "description": "Size of the input control."
        }
      ],
      "attributes": [
        {
          "name": "checked",
          "type": "boolean",
          "mutable": false,
          "attr": "checked",
          "reflectToAttr": false,
          "docs": "Sets the selected state as the default state. If the attribute’s value is undefined, the value is set to false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "Sets the selected state as the default state. If the attribute’s value is undefined, the value is set to false."
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Specifies whether to disable the control on the interface. If the attribute’s value is undefined, the value is set to false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "false",
          "description": "Specifies whether to disable the control on the interface. If the attribute’s value is undefined, the value is set to false."
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Name of the component, saved as part of the form data.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "''",
          "description": "Name of the component, saved as part of the form data."
        },
        {
          "name": "size",
          "type": "\"large\" | \"medium\" | \"small\"",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Size of the input control.",
          "docsTags": [],
          "default": "'medium'",
          "values": [
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "defaultValue": "'medium'",
          "description": "Size of the input control."
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "fwChange",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the input control is selected or deselected.",
          "docsTags": [],
          "name": "fwChange",
          "description": "Triggered when the input control is selected or deselected.",
          "type": "any"
        }
      ],
      "cssProperties": [],
      "slots": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    }
  ]
}