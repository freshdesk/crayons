/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';


export namespace Components {
  interface FwCheckbox {
    /**
    * Property to maintain checked state
    */
    'checked': boolean;
    /**
    * Disables the checkbox
    */
    'disabled': boolean;
    /**
    * Label for checkbox
    */
    'label': string;
    /**
    * Value of the checkbox for within a <form>
    */
    'value': string;
  }
  interface FwInput {
    /**
    * Indicates whether the value of the control can be automatically completed by the browser.
    */
    'autocomplete': 'on' | 'off';
    /**
    * If `true`, a clear icon will appear in the input when there is a value. Clicking it clears the input.
    */
    'clearInput': boolean;
    /**
    * Disabled
    */
    'disabled': boolean;
    /**
    * Returns the native `<input>` element used under the hood.
    */
    'getInputElement': () => Promise<HTMLInputElement>;
    /**
    * The type of control to display. The default type is text.
    */
    'label': string;
    /**
    * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the maximum number of characters that the user can enter.
    */
    'maxlength'?: number;
    /**
    * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the minimum number of characters that the user can enter.
    */
    'minlength'?: number;
    /**
    * The name of the control, which is submitted with the form data.
    */
    'name': string;
    /**
    * If `true`, a clear icon will appear in the input when there is a value. Clicking it clears the input.
    */
    'pattern': string;
    /**
    * Instructional text that shows before the input has a value.
    */
    'placeholder'?: string | null;
    /**
    * If `true`, the user cannot modify the value.
    */
    'readonly': boolean;
    /**
    * If `true`, the user must fill in a value before submitting a form.
    */
    'required': boolean;
    /**
    * Sets focus on the specified `ion-input`. Use this method instead of the global `input.focus()`.
    */
    'setFocus': () => Promise<void>;
    /**
    * The type of control to display. The default type is text.
    */
    'state': 'normal' | 'warning' | 'error';
    /**
    * Hint
    */
    'stateText': string;
    /**
    * The type of control to display. The default type is text.
    */
    'type': string;
    /**
    * The value of the input.
    */
    'value'?: string | null;
  }
  interface FwLabel {
    /**
    * The type of the label
    */
    'type': string;
    /**
    * The text in the label
    */
    'value': string;
  }
  interface FwRadio {
    /**
    * Property to maintain checked state
    */
    'checked': boolean;
    /**
    * Disables the radio button
    */
    'disabled': boolean;
    /**
    * Label for radio button
    */
    'label': string;
    /**
    * Value of the name for within a <form>
    */
    'name': string;
    /**
    * Value of the radio button for within a <form>
    */
    'value': string;
  }
  interface FwRadioGroup {
    /**
    * If `true`, the radios can be deselected.
    */
    'allowEmpty': boolean;
    /**
    * The name of the control, which is submitted with the form data.
    */
    'name': string;
    /**
    * the value of the radio group.
    */
    'value'?: any | null;
  }
  interface FwSpinner {
    /**
    * The size of the spinner - Options ['small' , 'default', 'medium', 'large']
    */
    'size': string;
  }
}

declare global {


  interface HTMLFwCheckboxElement extends Components.FwCheckbox, HTMLStencilElement {}
  var HTMLFwCheckboxElement: {
    prototype: HTMLFwCheckboxElement;
    new (): HTMLFwCheckboxElement;
  };

  interface HTMLFwInputElement extends Components.FwInput, HTMLStencilElement {}
  var HTMLFwInputElement: {
    prototype: HTMLFwInputElement;
    new (): HTMLFwInputElement;
  };

  interface HTMLFwLabelElement extends Components.FwLabel, HTMLStencilElement {}
  var HTMLFwLabelElement: {
    prototype: HTMLFwLabelElement;
    new (): HTMLFwLabelElement;
  };

  interface HTMLFwRadioElement extends Components.FwRadio, HTMLStencilElement {}
  var HTMLFwRadioElement: {
    prototype: HTMLFwRadioElement;
    new (): HTMLFwRadioElement;
  };

  interface HTMLFwRadioGroupElement extends Components.FwRadioGroup, HTMLStencilElement {}
  var HTMLFwRadioGroupElement: {
    prototype: HTMLFwRadioGroupElement;
    new (): HTMLFwRadioGroupElement;
  };

  interface HTMLFwSpinnerElement extends Components.FwSpinner, HTMLStencilElement {}
  var HTMLFwSpinnerElement: {
    prototype: HTMLFwSpinnerElement;
    new (): HTMLFwSpinnerElement;
  };
  interface HTMLElementTagNameMap {
    'fw-checkbox': HTMLFwCheckboxElement;
    'fw-input': HTMLFwInputElement;
    'fw-label': HTMLFwLabelElement;
    'fw-radio': HTMLFwRadioElement;
    'fw-radio-group': HTMLFwRadioGroupElement;
    'fw-spinner': HTMLFwSpinnerElement;
  }
}

declare namespace LocalJSX {
  interface FwCheckbox {
    /**
    * Property to maintain checked state
    */
    'checked'?: boolean;
    /**
    * Disables the checkbox
    */
    'disabled'?: boolean;
    /**
    * Label for checkbox
    */
    'label'?: string;
    /**
    * Emitted when the checbox loses focus.
    */
    'onFwBlur'?: (event: CustomEvent<void>) => void;
    /**
    * Emitted when the checkbox value has changed.
    */
    'onFwChange'?: (event: CustomEvent<any>) => void;
    /**
    * Emitted when the checkbox has focus.
    */
    'onFwFocus'?: (event: CustomEvent<void>) => void;
    /**
    * Value of the checkbox for within a <form>
    */
    'value'?: string;
  }
  interface FwInput {
    /**
    * Indicates whether the value of the control can be automatically completed by the browser.
    */
    'autocomplete'?: 'on' | 'off';
    /**
    * If `true`, a clear icon will appear in the input when there is a value. Clicking it clears the input.
    */
    'clearInput'?: boolean;
    /**
    * Disabled
    */
    'disabled'?: boolean;
    /**
    * The type of control to display. The default type is text.
    */
    'label'?: string;
    /**
    * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the maximum number of characters that the user can enter.
    */
    'maxlength'?: number;
    /**
    * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the minimum number of characters that the user can enter.
    */
    'minlength'?: number;
    /**
    * The name of the control, which is submitted with the form data.
    */
    'name'?: string;
    'onFwBlur'?: (event: CustomEvent<void>) => void;
    'onFwChange'?: (event: CustomEvent<any>) => void;
    'onFwFocus'?: (event: CustomEvent<void>) => void;
    'onFwInput'?: (event: CustomEvent<KeyboardEvent>) => void;
    /**
    * If `true`, a clear icon will appear in the input when there is a value. Clicking it clears the input.
    */
    'pattern'?: string;
    /**
    * Instructional text that shows before the input has a value.
    */
    'placeholder'?: string | null;
    /**
    * If `true`, the user cannot modify the value.
    */
    'readonly'?: boolean;
    /**
    * If `true`, the user must fill in a value before submitting a form.
    */
    'required'?: boolean;
    /**
    * The type of control to display. The default type is text.
    */
    'state'?: 'normal' | 'warning' | 'error';
    /**
    * Hint
    */
    'stateText'?: string;
    /**
    * The type of control to display. The default type is text.
    */
    'type'?: string;
    /**
    * The value of the input.
    */
    'value'?: string | null;
  }
  interface FwLabel {
    /**
    * The type of the label
    */
    'type'?: string;
    /**
    * The text in the label
    */
    'value'?: string;
  }
  interface FwRadio {
    /**
    * Property to maintain checked state
    */
    'checked'?: boolean;
    /**
    * Disables the radio button
    */
    'disabled'?: boolean;
    /**
    * Label for radio button
    */
    'label'?: string;
    /**
    * Value of the name for within a <form>
    */
    'name'?: string;
    /**
    * Emitted when the checbox loses focus.
    */
    'onFwBlur'?: (event: CustomEvent<void>) => void;
    /**
    * Emitted when the radio button value has changed.
    */
    'onFwDeselect'?: (event: CustomEvent<any>) => void;
    /**
    * Emitted when the radio button has focus.
    */
    'onFwFocus'?: (event: CustomEvent<void>) => void;
    /**
    * Emitted when the radio button value has changed.
    */
    'onFwSelect'?: (event: CustomEvent<any>) => void;
    /**
    * Value of the radio button for within a <form>
    */
    'value'?: string;
  }
  interface FwRadioGroup {
    /**
    * If `true`, the radios can be deselected.
    */
    'allowEmpty'?: boolean;
    /**
    * The name of the control, which is submitted with the form data.
    */
    'name'?: string;
    /**
    * Emitted when the value has changed.
    */
    'onFwChange'?: (event: CustomEvent<any>) => void;
    /**
    * the value of the radio group.
    */
    'value'?: any | null;
  }
  interface FwSpinner {
    /**
    * The size of the spinner - Options ['small' , 'default', 'medium', 'large']
    */
    'size'?: string;
  }

  interface IntrinsicElements {
    'fw-checkbox': FwCheckbox;
    'fw-input': FwInput;
    'fw-label': FwLabel;
    'fw-radio': FwRadio;
    'fw-radio-group': FwRadioGroup;
    'fw-spinner': FwSpinner;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      'fw-checkbox': LocalJSX.FwCheckbox & JSXBase.HTMLAttributes<HTMLFwCheckboxElement>;
      'fw-input': LocalJSX.FwInput & JSXBase.HTMLAttributes<HTMLFwInputElement>;
      'fw-label': LocalJSX.FwLabel & JSXBase.HTMLAttributes<HTMLFwLabelElement>;
      'fw-radio': LocalJSX.FwRadio & JSXBase.HTMLAttributes<HTMLFwRadioElement>;
      'fw-radio-group': LocalJSX.FwRadioGroup & JSXBase.HTMLAttributes<HTMLFwRadioGroupElement>;
      'fw-spinner': LocalJSX.FwSpinner & JSXBase.HTMLAttributes<HTMLFwSpinnerElement>;
    }
  }
}


