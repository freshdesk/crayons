#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

async function readFiles(rootPath) {
    const files = await fs.promises.readdir(rootPath);
    for (const file of files) {
        const filePath = path.join(rootPath, file);
        const stat = await fs.promises.stat(filePath);
        if (stat.isFile()) {
            fs.readFile(filePath, { encoding: 'utf8' }, (err, data) => {
                if (err) throw err;
                let tokens = JSON.parse(data);
                let component = Object.keys(tokens)[0];
                let className = component === 'base' ? ':root' : ':host';
                let cssString = `
// This is an autogenerated file created during build time from design tokens.
@import './${component}.scss';
${className}{${convertTokenToString(tokens)}}`;
                let outFileName = `./src/components/${component}/${component}.${filePath.split('/')[1]}.scss`;
                component !== 'base' && writeCssFile(outFileName, cssString)
            });
        }
        else {
            readFiles(filePath);
        }
    }
}

function convertTokenToString(tokens) {
    let cssString = '';
    for (const [key, value] of Object.entries(tokens)) {
        if ('var' in value) {
            cssString = cssString + `${value['var']} : ${value['value']};`;
        }
        else {
            cssString = cssString + convertTokenToString(value);
        }
    }
    return cssString;
}

function writeCssFile(outPath, content) {
    fs.writeFile(outPath, content, function (err) {
        if (err) {
            return console.log(err);
        }
        console.log(`created the css file ${outPath}`);
    });
}

readFiles("./design-tokens");
